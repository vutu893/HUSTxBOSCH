
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004c0c  08004c0c  00005c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf0  08004cf0  00005cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf8  08004cf8  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cfc  08004cfc  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004d00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          000012f8  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001374  20001374  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a98b  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb5  00000000  00000000  00010a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  000125f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a5  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b74  00000000  00000000  00013545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aab1  00000000  00000000  000150b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000babeb  00000000  00000000  0001fb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da755  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002810  00000000  00000000  000da798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  000dcfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bf4 	.word	0x08004bf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004bf4 	.word	0x08004bf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function when press button on GPIO PIN 1(A1)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d106      	bne.n	800057e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		statusButton ^= 0x01;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	f083 0301 	eor.w	r3, r3, #1
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b04      	ldr	r3, [pc, #16]	@ (800058c <HAL_GPIO_EXTI_Callback+0x2c>)
 800057c:	701a      	strb	r2, [r3, #0]
	}
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000121b 	.word	0x2000121b

08000590 <HAL_CAN_RxFifo0MsgPendingCallback>:

//
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(flg_CheckCan2Rx)
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d005      	beq.n	80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,&CAN2_pHeaderRx, CAN2_DATA_RX);
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80005a2:	4a0b      	ldr	r2, [pc, #44]	@ (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f001 faae 	bl	8001b08 <HAL_CAN_GetRxMessage>
	}
	if(flg_CheckCan1Rx)
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d005      	beq.n	80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,&CAN1_pHeaderRx, CAN1_DATA_RX);
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80005b6:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f001 faa4 	bl	8001b08 <HAL_CAN_GetRxMessage>
//	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,&CAN2_pHeaderRx, CAN2_DATA_RX);
//	if(CAN1_pHeaderRx.StdId == 0x0A2)
//	{
//		flg_CheckCan1Rx = 1;
//	}
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20001219 	.word	0x20001219
 80005cc:	20001210 	.word	0x20001210
 80005d0:	200001a4 	.word	0x200001a4
 80005d4:	20001218 	.word	0x20001218
 80005d8:	20001200 	.word	0x20001200
 80005dc:	20000148 	.word	0x20000148

080005e0 <setMessageTransmitFromCan1>:

void setMessageTransmitFromCan1()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if(statusButton)
	{

	}
	CAN1_DATA_TX[0] = (uint8_t) ((CAN1_pHeaderTx.StdId >> 8) & 0x00FF);
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <setMessageTransmitFromCan1+0x38>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <setMessageTransmitFromCan1+0x3c>)
 80005ee:	701a      	strb	r2, [r3, #0]
	CAN1_DATA_TX[1] = (uint8_t) (CAN1_pHeaderTx.StdId & 0x00FF);
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <setMessageTransmitFromCan1+0x38>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <setMessageTransmitFromCan1+0x3c>)
 80005f8:	705a      	strb	r2, [r3, #1]

	CAN1_DATA_TX[6] = counter;
 80005fa:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <setMessageTransmitFromCan1+0x40>)
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <setMessageTransmitFromCan1+0x3c>)
 8000600:	719a      	strb	r2, [r3, #6]
	CAN1_DATA_TX[7] = getValueCheckSum(CAN1_DATA_TX, 8);
 8000602:	2108      	movs	r1, #8
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <setMessageTransmitFromCan1+0x3c>)
 8000606:	f000 fc97 	bl	8000f38 <getValueCheckSum>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	4b03      	ldr	r3, [pc, #12]	@ (800061c <setMessageTransmitFromCan1+0x3c>)
 8000610:	71da      	strb	r2, [r3, #7]
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000130 	.word	0x20000130
 800061c:	200011f8 	.word	0x200011f8
 8000620:	2000121a 	.word	0x2000121a

08000624 <setMessageTransmitFromCan2>:

void setMessageTransmitFromCan2()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	CAN2_DATA_TX[0] = (uint8_t) ((CAN2_pHeaderTx.StdId >> 8) & 0x00FF);
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <setMessageTransmitFromCan2+0x48>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 8000632:	701a      	strb	r2, [r3, #0]
	CAN2_DATA_TX[1] = (uint8_t) (CAN2_pHeaderTx.StdId & 0x00FF);
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <setMessageTransmitFromCan2+0x48>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 800063c:	705a      	strb	r2, [r3, #1]
	CAN2_DATA_TX[2] = CAN2_DATA_TX[1] + CAN2_DATA_TX[0];
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 8000640:	785a      	ldrb	r2, [r3, #1]
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 800064c:	709a      	strb	r2, [r3, #2]

	CAN2_DATA_TX[6] = counter;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <setMessageTransmitFromCan2+0x50>)
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 8000654:	719a      	strb	r2, [r3, #6]
	CAN2_DATA_TX[7] = getValueCheckSum(CAN2_DATA_TX, 8);
 8000656:	2108      	movs	r1, #8
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 800065a:	f000 fc6d 	bl	8000f38 <getValueCheckSum>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <setMessageTransmitFromCan2+0x4c>)
 8000664:	71da      	strb	r2, [r3, #7]
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000018c 	.word	0x2000018c
 8000670:	20001208 	.word	0x20001208
 8000674:	2000121a 	.word	0x2000121a

08000678 <setMessageErrorFromCan2>:


void setMessageErrorFromCan2()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	CAN2_DATA_TX[0] = (uint8_t) ((CAN2_pHeaderTx.StdId >> 8) & 0x00FF);
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <setMessageErrorFromCan2+0x50>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <setMessageErrorFromCan2+0x54>)
 8000688:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= 5; i ++)
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e007      	b.n	80006a0 <setMessageErrorFromCan2+0x28>
	{
		CAN2_DATA_TX[i] = 0x00;
 8000690:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <setMessageErrorFromCan2+0x54>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= 5; i ++)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b05      	cmp	r3, #5
 80006a4:	ddf4      	ble.n	8000690 <setMessageErrorFromCan2+0x18>
	}

	CAN2_DATA_TX[6] = counter;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <setMessageErrorFromCan2+0x58>)
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <setMessageErrorFromCan2+0x54>)
 80006ac:	719a      	strb	r2, [r3, #6]
	CAN2_DATA_TX[7] = getValueCheckSum(CAN2_DATA_TX, 8);
 80006ae:	2108      	movs	r1, #8
 80006b0:	4806      	ldr	r0, [pc, #24]	@ (80006cc <setMessageErrorFromCan2+0x54>)
 80006b2:	f000 fc41 	bl	8000f38 <getValueCheckSum>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <setMessageErrorFromCan2+0x54>)
 80006bc:	71da      	strb	r2, [r3, #7]
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000018c 	.word	0x2000018c
 80006cc:	20001208 	.word	0x20001208
 80006d0:	2000121a 	.word	0x2000121a

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fe90 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f86e 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f9b0 	bl	8000a44 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006e4:	f000 f8d4 	bl	8000890 <MX_CAN1_Init>
  MX_CAN2_Init();
 80006e8:	f000 f92a 	bl	8000940 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 80006ec:	f000 f980 	bl	80009f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 80006f0:	f000 fa24 	bl	8000b3c <MX_CAN1_Setup>
  MX_CAN2_Setup();
 80006f4:	f000 fa36 	bl	8000b64 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <main+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <main+0xd0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f042 0220 	orr.w	r2, r2, #32
 8000706:	60da      	str	r2, [r3, #12]

  // Initialize data frame of CAN1
  CAN1_pHeaderTx.DLC = 8;
 8000708:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <main+0xd4>)
 800070a:	2208      	movs	r2, #8
 800070c:	611a      	str	r2, [r3, #16]
  CAN1_pHeaderTx.IDE = CAN_ID_STD;
 800070e:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <main+0xd4>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  CAN1_pHeaderTx.RTR = CAN_RTR_DATA;
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <main+0xd4>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  CAN1_pHeaderTx.StdId = 0x012;
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <main+0xd4>)
 800071c:	2212      	movs	r2, #18
 800071e:	601a      	str	r2, [r3, #0]
  CAN1_pHeaderTx.TransmitGlobalTime = ENABLE;
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <main+0xd4>)
 8000722:	2201      	movs	r2, #1
 8000724:	751a      	strb	r2, [r3, #20]

  // Initialize data frame of CAN2
  CAN2_pHeaderTx.DLC = 8;
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <main+0xd8>)
 8000728:	2208      	movs	r2, #8
 800072a:	611a      	str	r2, [r3, #16]
  CAN2_pHeaderTx.IDE = CAN_ID_STD;
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <main+0xd8>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  CAN2_pHeaderTx.RTR = CAN_RTR_DATA;
 8000732:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <main+0xd8>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  CAN2_pHeaderTx.StdId = 0x0A2;
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <main+0xd8>)
 800073a:	22a2      	movs	r2, #162	@ 0xa2
 800073c:	601a      	str	r2, [r3, #0]
  CAN2_pHeaderTx.TransmitGlobalTime = ENABLE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <main+0xd8>)
 8000740:	2201      	movs	r2, #1
 8000742:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	counter++;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <main+0xdc>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <main+0xdc>)
 800074e:	701a      	strb	r2, [r3, #0]
	if (counter > 0xF)
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <main+0xdc>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d902      	bls.n	800075e <main+0x8a>
	{
		counter = 0;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <main+0xdc>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	}

    if(!BtnU) /*IG OFF->ON stimulation*/
 800075e:	2102      	movs	r1, #2
 8000760:	4814      	ldr	r0, [pc, #80]	@ (80007b4 <main+0xe0>)
 8000762:	f002 f889 	bl	8002878 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d111      	bne.n	8000790 <main+0xbc>
    {
      delay(20);
 800076c:	2014      	movs	r0, #20
 800076e:	f000 fad5 	bl	8000d1c <delay>
      statusButton ^= 0x01;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <main+0xe4>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f083 0301 	eor.w	r3, r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <main+0xe4>)
 800077e:	701a      	strb	r2, [r3, #0]
      while(!BtnU);
 8000780:	bf00      	nop
 8000782:	2102      	movs	r1, #2
 8000784:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <main+0xe0>)
 8000786:	f002 f877 	bl	8002878 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f8      	beq.n	8000782 <main+0xae>
    }
	if (!statusButton)
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <main+0xe4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <main+0xca>
	{
		printLogNormal();
 8000798:	f000 face 	bl	8000d38 <printLogNormal>
 800079c:	e7d2      	b.n	8000744 <main+0x70>
	}else
	{
		printLogError();
 800079e:	f000 fb5d 	bl	8000e5c <printLogError>
	counter++;
 80007a2:	e7cf      	b.n	8000744 <main+0x70>
 80007a4:	200000e8 	.word	0x200000e8
 80007a8:	20000130 	.word	0x20000130
 80007ac:	2000018c 	.word	0x2000018c
 80007b0:	2000121a 	.word	0x2000121a
 80007b4:	40020000 	.word	0x40020000
 80007b8:	2000121b 	.word	0x2000121b

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	@ 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	@ 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fd92 	bl	80042f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e8:	4a27      	ldr	r2, [pc, #156]	@ (8000888 <SystemClock_Config+0xcc>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <SystemClock_Config+0xd0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a21      	ldr	r2, [pc, #132]	@ (800088c <SystemClock_Config+0xd0>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800082c:	2308      	movs	r3, #8
 800082e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000830:	23a8      	movs	r3, #168	@ 0xa8
 8000832:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f002 f849 	bl	80028d8 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800084c:	f000 fbbd 	bl	8000fca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800085c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2105      	movs	r1, #5
 800086e:	4618      	mov	r0, r3
 8000870:	f002 faaa 	bl	8002dc8 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800087a:	f000 fba6 	bl	8000fca <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	@ 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_CAN1_Init+0xa4>)
 8000896:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <MX_CAN1_Init+0xa8>)
 8000898:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800089a:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_CAN1_Init+0xa4>)
 800089c:	2210      	movs	r2, #16
 800089e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008a6:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008ac:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008d4:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008e0:	4814      	ldr	r0, [pc, #80]	@ (8000934 <MX_CAN1_Init+0xa4>)
 80008e2:	f000 fe21 	bl	8001528 <HAL_CAN_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 fb6d 	bl	8000fca <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN1_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_CAN1_Init+0xac>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	621a      	str	r2, [r3, #32]
  CAN1_sFilterConfig.FilterBank = 18;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_CAN1_Init+0xac>)
 80008f8:	2212      	movs	r2, #18
 80008fa:	615a      	str	r2, [r3, #20]
  CAN1_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_CAN1_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  CAN1_sFilterConfig.FilterIdHigh = 0x0A2 << 5;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_CAN1_Init+0xac>)
 8000904:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 8000908:	601a      	str	r2, [r3, #0]
  CAN1_sFilterConfig.FilterIdLow = 0;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_CAN1_Init+0xac>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  CAN1_sFilterConfig.FilterMaskIdHigh = 0x0A2 << 5;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_CAN1_Init+0xac>)
 8000912:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 8000916:	609a      	str	r2, [r3, #8]
  CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_CAN1_Init+0xac>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_CAN1_Init+0xac>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <MX_CAN1_Init+0xac>)
 8000926:	2201      	movs	r2, #1
 8000928:	61da      	str	r2, [r3, #28]
  CAN1_sFilterConfig.SlaveStartFilterBank = 20;
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <MX_CAN1_Init+0xac>)
 800092c:	2214      	movs	r2, #20
 800092e:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000098 	.word	0x20000098
 8000938:	40006400 	.word	0x40006400
 800093c:	20000164 	.word	0x20000164

08000940 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000946:	4a28      	ldr	r2, [pc, #160]	@ (80009e8 <MX_CAN2_Init+0xa8>)
 8000948:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 800094c:	2210      	movs	r2, #16
 800094e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 800095e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000962:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000966:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800096a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000990:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <MX_CAN2_Init+0xa4>)
 8000992:	f000 fdc9 	bl	8001528 <HAL_CAN_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800099c:	f000 fb15 	bl	8000fca <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  	CAN2_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	621a      	str	r2, [r3, #32]
  	CAN2_sFilterConfig.FilterBank = 10;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009a8:	220a      	movs	r2, #10
 80009aa:	615a      	str	r2, [r3, #20]
  	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  	CAN2_sFilterConfig.FilterIdHigh = 0x012 << 5;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009b4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80009b8:	601a      	str	r2, [r3, #0]
  	CAN2_sFilterConfig.FilterIdLow = 0;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  	CAN2_sFilterConfig.FilterMaskIdHigh = 0x012 << 5;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009c2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80009c6:	609a      	str	r2, [r3, #8]
  	CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	61da      	str	r2, [r3, #28]
  	CAN2_sFilterConfig.SlaveStartFilterBank = 0;
 80009da:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <MX_CAN2_Init+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000c0 	.word	0x200000c0
 80009e8:	40006800 	.word	0x40006800
 80009ec:	200001c0 	.word	0x200001c0

080009f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <MX_USART3_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_USART3_UART_Init+0x4c>)
 8000a28:	f002 fbee 	bl	8003208 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 faca 	bl	8000fca <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000e8 	.word	0x200000e8
 8000a40:	40004800 	.word	0x40004800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a33      	ldr	r2, [pc, #204]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a25      	ldr	r2, [pc, #148]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <MX_GPIO_Init+0xec>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000aca:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 8000ace:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	@ (8000b34 <MX_GPIO_Init+0xf0>)
 8000ae0:	f001 fd2e 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	480f      	ldr	r0, [pc, #60]	@ (8000b38 <MX_GPIO_Init+0xf4>)
 8000afa:	f001 fd21 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <MX_GPIO_Init+0xf4>)
 8000b12:	f001 fd15 	bl	8002540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	2006      	movs	r0, #6
 8000b1c:	f001 fc47 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b20:	2006      	movs	r0, #6
 8000b22:	f001 fc60 	bl	80023e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000

08000b3c <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000b40:	4906      	ldr	r1, [pc, #24]	@ (8000b5c <MX_CAN1_Setup+0x20>)
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <MX_CAN1_Setup+0x24>)
 8000b44:	f000 fdec 	bl	8001720 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_CAN1_Setup+0x24>)
 8000b4a:	f000 fec9 	bl	80018e0 <HAL_CAN_Start>
	// enable interrupt CAN1
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <MX_CAN1_Setup+0x24>)
 8000b52:	f001 f8fb 	bl	8001d4c <HAL_CAN_ActivateNotification>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000164 	.word	0x20000164
 8000b60:	20000098 	.word	0x20000098

08000b64 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000b68:	4906      	ldr	r1, [pc, #24]	@ (8000b84 <MX_CAN2_Setup+0x20>)
 8000b6a:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <MX_CAN2_Setup+0x24>)
 8000b6c:	f000 fdd8 	bl	8001720 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_CAN2_Setup+0x24>)
 8000b72:	f000 feb5 	bl	80018e0 <HAL_CAN_Start>
	// enable interrupt CAN2
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b76:	2102      	movs	r1, #2
 8000b78:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <MX_CAN2_Setup+0x24>)
 8000b7a:	f001 f8e7 	bl	8001d4c <HAL_CAN_ActivateNotification>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200001c0 	.word	0x200001c0
 8000b88:	200000c0 	.word	0x200000c0

08000b8c <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 8000b94:	e009      	b.n	8000baa <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <USART3_SendString+0x30>)
 8000ba0:	f002 fb82 	bl	80032a8 <HAL_UART_Transmit>
      ch++;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f1      	bne.n	8000b96 <USART3_SendString+0xa>
   }
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000e8 	.word	0x200000e8

08000bc0 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t * CAN_Frame)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	83fb      	strh	r3, [r7, #30]
	char bufID[3] = "   ";
 8000bd0:	4a3b      	ldr	r2, [pc, #236]	@ (8000cc0 <PrintCANLog+0x100>)
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	8019      	strh	r1, [r3, #0]
 8000bdc:	3302      	adds	r3, #2
 8000bde:	0c12      	lsrs	r2, r2, #16
 8000be0:	701a      	strb	r2, [r3, #0]
	char bufDat[2] = "  ";
 8000be2:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000be6:	82bb      	strh	r3, [r7, #20]
	char bufTime [8]="        ";
 8000be8:	4a36      	ldr	r2, [pc, #216]	@ (8000cc4 <PrintCANLog+0x104>)
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf2:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(bufTime,"%d",TimeStamp);
 8000bf6:	4b34      	ldr	r3, [pc, #208]	@ (8000cc8 <PrintCANLog+0x108>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4933      	ldr	r1, [pc, #204]	@ (8000ccc <PrintCANLog+0x10c>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fb57 	bl	80042b4 <siprintf>
	USART3_SendString((uint8_t*)bufTime);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ffbe 	bl	8000b8c <USART3_SendString>
	USART3_SendString((uint8_t*)" ");
 8000c10:	482f      	ldr	r0, [pc, #188]	@ (8000cd0 <PrintCANLog+0x110>)
 8000c12:	f7ff ffbb 	bl	8000b8c <USART3_SendString>

	sprintf(bufID,"%03X",CANID);
 8000c16:	88fa      	ldrh	r2, [r7, #6]
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	492d      	ldr	r1, [pc, #180]	@ (8000cd4 <PrintCANLog+0x114>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fb48 	bl	80042b4 <siprintf>
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	83fb      	strh	r3, [r7, #30]
 8000c28:	e00a      	b.n	8000c40 <PrintCANLog+0x80>
	{
		bufsend[loopIndx]  = bufID[loopIndx];
 8000c2a:	8bfa      	ldrh	r2, [r7, #30]
 8000c2c:	8bfb      	ldrh	r3, [r7, #30]
 8000c2e:	3220      	adds	r2, #32
 8000c30:	443a      	add	r2, r7
 8000c32:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000c36:	4a28      	ldr	r2, [pc, #160]	@ (8000cd8 <PrintCANLog+0x118>)
 8000c38:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000c3a:	8bfb      	ldrh	r3, [r7, #30]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	83fb      	strh	r3, [r7, #30]
 8000c40:	8bfb      	ldrh	r3, [r7, #30]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d9f1      	bls.n	8000c2a <PrintCANLog+0x6a>
	}
	bufsend[3] = ':';
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <PrintCANLog+0x118>)
 8000c48:	223a      	movs	r2, #58	@ 0x3a
 8000c4a:	70da      	strb	r2, [r3, #3]
	bufsend[4] = ' ';
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <PrintCANLog+0x118>)
 8000c4e:	2220      	movs	r2, #32
 8000c50:	711a      	strb	r2, [r3, #4]


	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000c52:	2300      	movs	r3, #0
 8000c54:	83fb      	strh	r3, [r7, #30]
 8000c56:	e025      	b.n	8000ca4 <PrintCANLog+0xe4>
	{
		sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 8000c58:	8bfb      	ldrh	r3, [r7, #30]
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	491d      	ldr	r1, [pc, #116]	@ (8000cdc <PrintCANLog+0x11c>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fb23 	bl	80042b4 <siprintf>
		bufsend[loopIndx*3 + 5] = bufDat[0];
 8000c6e:	8bfa      	ldrh	r2, [r7, #30]
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	3305      	adds	r3, #5
 8000c78:	7d39      	ldrb	r1, [r7, #20]
 8000c7a:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <PrintCANLog+0x118>)
 8000c7c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 6] = bufDat[1];
 8000c7e:	8bfa      	ldrh	r2, [r7, #30]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	3306      	adds	r3, #6
 8000c88:	7d79      	ldrb	r1, [r7, #21]
 8000c8a:	4a13      	ldr	r2, [pc, #76]	@ (8000cd8 <PrintCANLog+0x118>)
 8000c8c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 7] = ' ';
 8000c8e:	8bfa      	ldrh	r2, [r7, #30]
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	3307      	adds	r3, #7
 8000c98:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <PrintCANLog+0x118>)
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000c9e:	8bfb      	ldrh	r3, [r7, #30]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	83fb      	strh	r3, [r7, #30]
 8000ca4:	8bfb      	ldrh	r3, [r7, #30]
 8000ca6:	2b07      	cmp	r3, #7
 8000ca8:	d9d6      	bls.n	8000c58 <PrintCANLog+0x98>
	}
	bufsend[29] = '\n';
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <PrintCANLog+0x118>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	775a      	strb	r2, [r3, #29]
	USART3_SendString((unsigned char*)bufsend);
 8000cb0:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <PrintCANLog+0x118>)
 8000cb2:	f7ff ff6b 	bl	8000b8c <USART3_SendString>
}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08004c24 	.word	0x08004c24
 8000cc4:	08004c28 	.word	0x08004c28
 8000cc8:	2000121c 	.word	0x2000121c
 8000ccc:	08004c0c 	.word	0x08004c0c
 8000cd0:	08004c10 	.word	0x08004c10
 8000cd4:	08004c14 	.word	0x08004c14
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	08004c1c 	.word	0x08004c1c

08000ce0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_UART_RxCpltCallback+0x30>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_UART_RxCpltCallback+0x34>)
 8000cf0:	7819      	ldrb	r1, [r3, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_UART_RxCpltCallback+0x38>)
 8000cf4:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_UART_RxCpltCallback+0x30>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <HAL_UART_RxCpltCallback+0x30>)
 8000d00:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200001f0 	.word	0x200001f0
 8000d14:	200011f4 	.word	0x200011f4
 8000d18:	200001f4 	.word	0x200001f4

08000d1c <delay>:
void delay(uint16_t delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fbd9 	bl	80014e0 <HAL_Delay>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <printLogNormal>:
void printLogNormal()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	setMessageTransmitFromCan1();
 8000d3c:	f7ff fc50 	bl	80005e0 <setMessageTransmitFromCan1>
	setMessageTransmitFromCan2();
 8000d40:	f7ff fc70 	bl	8000624 <setMessageTransmitFromCan2>

	delay(1000);
 8000d44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d48:	f7ff ffe8 	bl	8000d1c <delay>
	USART3_SendString((uint8_t *)"->IG ON \n");
 8000d4c:	482f      	ldr	r0, [pc, #188]	@ (8000e0c <printLogNormal+0xd4>)
 8000d4e:	f7ff ff1d 	bl	8000b8c <USART3_SendString>
	//CAN1 transmit, CAN2 receive
	USART3_SendString((uint8_t *) "CAN1 TX: \n");
 8000d52:	482f      	ldr	r0, [pc, #188]	@ (8000e10 <printLogNormal+0xd8>)
 8000d54:	f7ff ff1a 	bl	8000b8c <USART3_SendString>
	PrintCANLog(CAN1_pHeaderTx.StdId, CAN1_DATA_TX);
 8000d58:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <printLogNormal+0xdc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	492e      	ldr	r1, [pc, #184]	@ (8000e18 <printLogNormal+0xe0>)
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff2d 	bl	8000bc0 <PrintCANLog>
	USART3_SendString((uint8_t *) "\n");
 8000d66:	482d      	ldr	r0, [pc, #180]	@ (8000e1c <printLogNormal+0xe4>)
 8000d68:	f7ff ff10 	bl	8000b8c <USART3_SendString>
	//CAN 1 transmit data
	if (HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeaderTx, CAN1_DATA_TX, &CAN1_pTxMailbox) == HAL_OK)
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <printLogNormal+0xe8>)
 8000d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e18 <printLogNormal+0xe0>)
 8000d70:	4928      	ldr	r1, [pc, #160]	@ (8000e14 <printLogNormal+0xdc>)
 8000d72:	482c      	ldr	r0, [pc, #176]	@ (8000e24 <printLogNormal+0xec>)
 8000d74:	f000 fdf8 	bl	8001968 <HAL_CAN_AddTxMessage>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <printLogNormal+0x4c>
	{
			flg_CheckCan2Rx = 1;
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <printLogNormal+0xf0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	}
	USART3_SendString((uint8_t *) "CAN2 RX: \n");
 8000d84:	4829      	ldr	r0, [pc, #164]	@ (8000e2c <printLogNormal+0xf4>)
 8000d86:	f7ff ff01 	bl	8000b8c <USART3_SendString>
	PrintCANLog(CAN2_pHeaderRx.StdId,CAN2_DATA_RX);
 8000d8a:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <printLogNormal+0xf8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4928      	ldr	r1, [pc, #160]	@ (8000e34 <printLogNormal+0xfc>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff14 	bl	8000bc0 <PrintCANLog>
	USART3_SendString((uint8_t *) "\n");
 8000d98:	4820      	ldr	r0, [pc, #128]	@ (8000e1c <printLogNormal+0xe4>)
 8000d9a:	f7ff fef7 	bl	8000b8c <USART3_SendString>
	flg_CheckCan2Rx = 0;
 8000d9e:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <printLogNormal+0xf0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
	delay(1000);
 8000da4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da8:	f7ff ffb8 	bl	8000d1c <delay>

	//CAN1 receive, CAN2 transmit
	USART3_SendString((uint8_t *) "CAN2 TX: \n");
 8000dac:	4822      	ldr	r0, [pc, #136]	@ (8000e38 <printLogNormal+0x100>)
 8000dae:	f7ff feed 	bl	8000b8c <USART3_SendString>
	PrintCANLog(CAN2_pHeaderTx.StdId, CAN2_DATA_TX);
 8000db2:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <printLogNormal+0x104>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4921      	ldr	r1, [pc, #132]	@ (8000e40 <printLogNormal+0x108>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff00 	bl	8000bc0 <PrintCANLog>
	USART3_SendString((uint8_t *) "\n");
 8000dc0:	4816      	ldr	r0, [pc, #88]	@ (8000e1c <printLogNormal+0xe4>)
 8000dc2:	f7ff fee3 	bl	8000b8c <USART3_SendString>
	//CAN 2 transmit data
	if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeaderTx, CAN2_DATA_TX, &CAN2_pTxMailbox) == HAL_OK)
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <printLogNormal+0x10c>)
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <printLogNormal+0x108>)
 8000dca:	491c      	ldr	r1, [pc, #112]	@ (8000e3c <printLogNormal+0x104>)
 8000dcc:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <printLogNormal+0x110>)
 8000dce:	f000 fdcb 	bl	8001968 <HAL_CAN_AddTxMessage>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <printLogNormal+0xa6>
	{
				flg_CheckCan1Rx = 1;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <printLogNormal+0x114>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
	}

	USART3_SendString((uint8_t *) "CAN1 RX: \n");
 8000dde:	481c      	ldr	r0, [pc, #112]	@ (8000e50 <printLogNormal+0x118>)
 8000de0:	f7ff fed4 	bl	8000b8c <USART3_SendString>
	PrintCANLog(CAN1_pHeaderRx.StdId,CAN1_DATA_RX);
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <printLogNormal+0x11c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	491b      	ldr	r1, [pc, #108]	@ (8000e58 <printLogNormal+0x120>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fee7 	bl	8000bc0 <PrintCANLog>
	USART3_SendString((uint8_t *) "\n");
 8000df2:	480a      	ldr	r0, [pc, #40]	@ (8000e1c <printLogNormal+0xe4>)
 8000df4:	f7ff feca 	bl	8000b8c <USART3_SendString>
	flg_CheckCan1Rx = 0;
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <printLogNormal+0x114>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e02:	f7ff ff8b 	bl	8000d1c <delay>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08004c30 	.word	0x08004c30
 8000e10:	08004c3c 	.word	0x08004c3c
 8000e14:	20000130 	.word	0x20000130
 8000e18:	200011f8 	.word	0x200011f8
 8000e1c:	08004c48 	.word	0x08004c48
 8000e20:	200001e8 	.word	0x200001e8
 8000e24:	20000098 	.word	0x20000098
 8000e28:	20001219 	.word	0x20001219
 8000e2c:	08004c4c 	.word	0x08004c4c
 8000e30:	200001a4 	.word	0x200001a4
 8000e34:	20001210 	.word	0x20001210
 8000e38:	08004c58 	.word	0x08004c58
 8000e3c:	2000018c 	.word	0x2000018c
 8000e40:	20001208 	.word	0x20001208
 8000e44:	200001ec 	.word	0x200001ec
 8000e48:	200000c0 	.word	0x200000c0
 8000e4c:	20001218 	.word	0x20001218
 8000e50:	08004c64 	.word	0x08004c64
 8000e54:	20000148 	.word	0x20000148
 8000e58:	20001200 	.word	0x20001200

08000e5c <printLogError>:

void printLogError()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	setMessageTransmitFromCan1();
 8000e60:	f7ff fbbe 	bl	80005e0 <setMessageTransmitFromCan1>
	setMessageErrorFromCan2();
 8000e64:	f7ff fc08 	bl	8000678 <setMessageErrorFromCan2>
	delay(1000);
 8000e68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e6c:	f7ff ff56 	bl	8000d1c <delay>
	USART3_SendString((uint8_t *) "IG OFF \n");
 8000e70:	4822      	ldr	r0, [pc, #136]	@ (8000efc <printLogError+0xa0>)
 8000e72:	f7ff fe8b 	bl	8000b8c <USART3_SendString>

	//CAN1 receive, CAN2 transmit
	USART3_SendString((uint8_t *) "CAN2 TX: \n");
 8000e76:	4822      	ldr	r0, [pc, #136]	@ (8000f00 <printLogError+0xa4>)
 8000e78:	f7ff fe88 	bl	8000b8c <USART3_SendString>
	PrintCANLog(CAN2_pHeaderTx.StdId, CAN2_DATA_TX);
 8000e7c:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <printLogError+0xa8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4921      	ldr	r1, [pc, #132]	@ (8000f08 <printLogError+0xac>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe9b 	bl	8000bc0 <PrintCANLog>
	USART3_SendString((uint8_t *) "\n");
 8000e8a:	4820      	ldr	r0, [pc, #128]	@ (8000f0c <printLogError+0xb0>)
 8000e8c:	f7ff fe7e 	bl	8000b8c <USART3_SendString>

	//CAN 2 transmit data
	if (HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeaderTx, CAN2_DATA_TX, &CAN2_pTxMailbox) == HAL_OK)
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <printLogError+0xb4>)
 8000e92:	4a1d      	ldr	r2, [pc, #116]	@ (8000f08 <printLogError+0xac>)
 8000e94:	491b      	ldr	r1, [pc, #108]	@ (8000f04 <printLogError+0xa8>)
 8000e96:	481f      	ldr	r0, [pc, #124]	@ (8000f14 <printLogError+0xb8>)
 8000e98:	f000 fd66 	bl	8001968 <HAL_CAN_AddTxMessage>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <printLogError+0x4c>
	{
				flg_CheckCan1Rx = 1;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <printLogError+0xbc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
	}

	USART3_SendString((uint8_t *) "CAN1 RX: \n");
 8000ea8:	481c      	ldr	r0, [pc, #112]	@ (8000f1c <printLogError+0xc0>)
 8000eaa:	f7ff fe6f 	bl	8000b8c <USART3_SendString>
	PrintCANLog(CAN1_pHeaderRx.StdId,CAN1_DATA_RX);
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <printLogError+0xc4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	491b      	ldr	r1, [pc, #108]	@ (8000f24 <printLogError+0xc8>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fe82 	bl	8000bc0 <PrintCANLog>
	USART3_SendString((uint8_t *) "\n");
 8000ebc:	4813      	ldr	r0, [pc, #76]	@ (8000f0c <printLogError+0xb0>)
 8000ebe:	f7ff fe65 	bl	8000b8c <USART3_SendString>
	flg_CheckCan1Rx = 0;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <printLogError+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
	delay(1000);
 8000ec8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ecc:	f7ff ff26 	bl	8000d1c <delay>
	//CAN1 transmit, CAN2 receive
	USART3_SendString((uint8_t *) "CAN1 TX: \n");
 8000ed0:	4815      	ldr	r0, [pc, #84]	@ (8000f28 <printLogError+0xcc>)
 8000ed2:	f7ff fe5b 	bl	8000b8c <USART3_SendString>
	PrintCANLog(CAN1_pHeaderTx.StdId, CAN1_DATA_TX);
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <printLogError+0xd0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4914      	ldr	r1, [pc, #80]	@ (8000f30 <printLogError+0xd4>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe6e 	bl	8000bc0 <PrintCANLog>
	USART3_SendString((uint8_t *) "CAN2 RX NOT RECEIVE DUE TO WRONG CRC");
 8000ee4:	4813      	ldr	r0, [pc, #76]	@ (8000f34 <printLogError+0xd8>)
 8000ee6:	f7ff fe51 	bl	8000b8c <USART3_SendString>
	USART3_SendString((uint8_t *) "\n");
 8000eea:	4808      	ldr	r0, [pc, #32]	@ (8000f0c <printLogError+0xb0>)
 8000eec:	f7ff fe4e 	bl	8000b8c <USART3_SendString>
	delay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ef4:	f7ff ff12 	bl	8000d1c <delay>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	08004c70 	.word	0x08004c70
 8000f00:	08004c58 	.word	0x08004c58
 8000f04:	2000018c 	.word	0x2000018c
 8000f08:	20001208 	.word	0x20001208
 8000f0c:	08004c48 	.word	0x08004c48
 8000f10:	200001ec 	.word	0x200001ec
 8000f14:	200000c0 	.word	0x200000c0
 8000f18:	20001218 	.word	0x20001218
 8000f1c:	08004c64 	.word	0x08004c64
 8000f20:	20000148 	.word	0x20000148
 8000f24:	20001200 	.word	0x20001200
 8000f28:	08004c3c 	.word	0x08004c3c
 8000f2c:	20000130 	.word	0x20000130
 8000f30:	200011f8 	.word	0x200011f8
 8000f34:	08004c7c 	.word	0x08004c7c

08000f38 <getValueCheckSum>:

uint8_t getValueCheckSum(uint8_t data[], uint8_t Crc_len)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
	uint8_t idx = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
	uint8_t crc = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73bb      	strb	r3, [r7, #14]
	uint8_t temp1 = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]
	uint8_t temp2 = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	72fb      	strb	r3, [r7, #11]
	uint8_t idy = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	733b      	strb	r3, [r7, #12]
	for(idx = 0; idx < Crc_len + 1; idx++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e02a      	b.n	8000fb4 <getValueCheckSum+0x7c>
	{
		if(idx == 0)
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <getValueCheckSum+0x32>
		{
			temp1 = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	737b      	strb	r3, [r7, #13]
 8000f68:	e007      	b.n	8000f7a <getValueCheckSum+0x42>
		}
		else
		{
			temp1 = data[Crc_len - idx];
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	737b      	strb	r3, [r7, #13]
		}
		crc = (crc ^ temp1);
 8000f7a:	7bba      	ldrb	r2, [r7, #14]
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	73bb      	strb	r3, [r7, #14]
		for(idy = 8; idy > 0; idy--)
 8000f82:	2308      	movs	r3, #8
 8000f84:	733b      	strb	r3, [r7, #12]
 8000f86:	e00f      	b.n	8000fa8 <getValueCheckSum+0x70>
		{
			temp2 = crc;
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	72fb      	strb	r3, [r7, #11]
			crc <<= 1;
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	73bb      	strb	r3, [r7, #14]
			if (0 != (temp2 & 128))
 8000f92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da03      	bge.n	8000fa2 <getValueCheckSum+0x6a>
			{
				crc ^= 0x1D;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f083 031d 	eor.w	r3, r3, #29
 8000fa0:	73bb      	strb	r3, [r7, #14]
		for(idy = 8; idy > 0; idy--)
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	733b      	strb	r3, [r7, #12]
 8000fa8:	7b3b      	ldrb	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ec      	bne.n	8000f88 <getValueCheckSum+0x50>
	for(idx = 0; idx < Crc_len + 1; idx++)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	78fa      	ldrb	r2, [r7, #3]
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d2d0      	bcs.n	8000f5e <getValueCheckSum+0x26>
			}
		}
	}
	return crc;
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fce:	b672      	cpsid	i
}
 8000fd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd2:	bf00      	nop
 8000fd4:	e7fd      	b.n	8000fd2 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <HAL_MspInit+0x4c>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x4c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a4a      	ldr	r2, [pc, #296]	@ (8001170 <HAL_CAN_MspInit+0x148>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d13e      	bne.n	80010c8 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800104a:	4b4a      	ldr	r3, [pc, #296]	@ (8001174 <HAL_CAN_MspInit+0x14c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a48      	ldr	r2, [pc, #288]	@ (8001174 <HAL_CAN_MspInit+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001054:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <HAL_CAN_MspInit+0x14c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10d      	bne.n	8001078 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	4b45      	ldr	r3, [pc, #276]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	4a44      	ldr	r2, [pc, #272]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 8001066:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800106a:	6413      	str	r3, [r2, #64]	@ 0x40
 800106c:	4b42      	ldr	r3, [pc, #264]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	4b3e      	ldr	r3, [pc, #248]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	4a3d      	ldr	r2, [pc, #244]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6313      	str	r3, [r2, #48]	@ 0x30
 8001088:	4b3b      	ldr	r3, [pc, #236]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001094:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010a6:	2309      	movs	r3, #9
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4832      	ldr	r0, [pc, #200]	@ (800117c <HAL_CAN_MspInit+0x154>)
 80010b2:	f001 fa45 	bl	8002540 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2102      	movs	r1, #2
 80010ba:	2014      	movs	r0, #20
 80010bc:	f001 f977 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010c0:	2014      	movs	r0, #20
 80010c2:	f001 f990 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80010c6:	e04f      	b.n	8001168 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001180 <HAL_CAN_MspInit+0x158>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d14a      	bne.n	8001168 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a27      	ldr	r2, [pc, #156]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 80010dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <HAL_CAN_MspInit+0x14c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001174 <HAL_CAN_MspInit+0x14c>)
 80010f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <HAL_CAN_MspInit+0x14c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10d      	bne.n	800111c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 800110a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800110e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	6313      	str	r3, [r2, #48]	@ 0x30
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_CAN_MspInit+0x150>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001138:	2360      	movs	r3, #96	@ 0x60
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001148:	2309      	movs	r3, #9
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <HAL_CAN_MspInit+0x15c>)
 8001154:	f001 f9f4 	bl	8002540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2102      	movs	r1, #2
 800115c:	2040      	movs	r0, #64	@ 0x40
 800115e:	f001 f926 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001162:	2040      	movs	r0, #64	@ 0x40
 8001164:	f001 f93f 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	3730      	adds	r7, #48	@ 0x30
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40006400 	.word	0x40006400
 8001174:	20001220 	.word	0x20001220
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000
 8001180:	40006800 	.word	0x40006800
 8001184:	40020400 	.word	0x40020400

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <HAL_UART_MspInit+0x94>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d134      	bne.n	8001214 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_UART_MspInit+0x98>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_UART_MspInit+0x98>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_UART_MspInit+0x98>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_UART_MspInit+0x98>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <HAL_UART_MspInit+0x98>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_UART_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f4:	2307      	movs	r3, #7
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4809      	ldr	r0, [pc, #36]	@ (8001224 <HAL_UART_MspInit+0x9c>)
 8001200:	f001 f99e 	bl	8002540 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	2027      	movs	r0, #39	@ 0x27
 800120a:	f001 f8d0 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800120e:	2027      	movs	r0, #39	@ 0x27
 8001210:	f001 f8e9 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	@ 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40004800 	.word	0x40004800
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 f90e 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <SysTick_Handler+0x18>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a02      	ldr	r2, [pc, #8]	@ (8001294 <SysTick_Handler+0x18>)
 800128c:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000121c 	.word	0x2000121c

08001298 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800129c:	2002      	movs	r0, #2
 800129e:	f001 fb03 	bl	80028a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <CAN1_RX0_IRQHandler+0x1c>)
 80012ae:	f000 fd73 	bl	8001d98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <CAN1_RX0_IRQHandler+0x20>)
 80012b4:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <CAN1_RX0_IRQHandler+0x24>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <CAN1_RX0_IRQHandler+0x1c>)
 80012ba:	f000 fc25 	bl	8001b08 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000098 	.word	0x20000098
 80012c8:	20001200 	.word	0x20001200
 80012cc:	20000148 	.word	0x20000148

080012d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <USART3_IRQHandler+0x18>)
 80012d6:	f002 f897 	bl	8003408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 80012da:	2201      	movs	r2, #1
 80012dc:	4903      	ldr	r1, [pc, #12]	@ (80012ec <USART3_IRQHandler+0x1c>)
 80012de:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <USART3_IRQHandler+0x18>)
 80012e0:	f002 f86d 	bl	80033be <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000e8 	.word	0x200000e8
 80012ec:	200011f4 	.word	0x200011f4

080012f0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	uint8_t NumByteSend;
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <CAN2_RX0_IRQHandler+0x1c>)
 80012f6:	f000 fd4f 	bl	8001d98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <CAN2_RX0_IRQHandler+0x20>)
 80012fc:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <CAN2_RX0_IRQHandler+0x24>)
 80012fe:	2100      	movs	r1, #0
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <CAN2_RX0_IRQHandler+0x1c>)
 8001302:	f000 fc01 	bl	8001b08 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000c0 	.word	0x200000c0
 8001310:	20001210 	.word	0x20001210
 8001314:	200001a4 	.word	0x200001a4

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f002 ffdc 	bl	8004304 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20020000 	.word	0x20020000
 8001378:	00000400 	.word	0x00000400
 800137c:	20001224 	.word	0x20001224
 8001380:	20001378 	.word	0x20001378

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ae:	490e      	ldr	r1, [pc, #56]	@ (80013e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c4:	4c0b      	ldr	r4, [pc, #44]	@ (80013f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013d2:	f7ff ffd7 	bl	8001384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f002 ff9b 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff f97b 	bl	80006d4 <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013ec:	08004d00 	.word	0x08004d00
  ldr r2, =_sbss
 80013f0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013f4:	20001374 	.word	0x20001374

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <HAL_Init+0x40>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_Init+0x40>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x40>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 ffb7 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fdd2 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 ffcf 	bl	8002402 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 ff97 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000020 	.word	0x20000020
 8001498:	20000028 	.word	0x20000028
 800149c:	20000024 	.word	0x20000024

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000028 	.word	0x20000028
 80014c4:	20001228 	.word	0x20001228

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20001228 	.word	0x20001228

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000028 	.word	0x20000028

08001528 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0ed      	b.n	8001716 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fd6e 	bl	8001028 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155c:	f7ff ffb4 	bl	80014c8 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001562:	e012      	b.n	800158a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001564:	f7ff ffb0 	bl	80014c8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b0a      	cmp	r3, #10
 8001570:	d90b      	bls.n	800158a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2205      	movs	r2, #5
 8001582:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0c5      	b.n	8001716 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0e5      	beq.n	8001564 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0202 	bic.w	r2, r2, #2
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a8:	f7ff ff8e 	bl	80014c8 <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ae:	e012      	b.n	80015d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b0:	f7ff ff8a 	bl	80014c8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d90b      	bls.n	80015d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2205      	movs	r2, #5
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e09f      	b.n	8001716 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e5      	bne.n	80015b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e1b      	ldrb	r3, [r3, #24]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7e5b      	ldrb	r3, [r3, #25]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e9b      	ldrb	r3, [r3, #26]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0220 	orr.w	r2, r2, #32
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e007      	b.n	8001662 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0220 	bic.w	r2, r2, #32
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7edb      	ldrb	r3, [r3, #27]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d108      	bne.n	800167c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0210 	bic.w	r2, r2, #16
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e007      	b.n	800168c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0210 	orr.w	r2, r2, #16
 800168a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7f1b      	ldrb	r3, [r3, #28]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d108      	bne.n	80016a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0208 	orr.w	r2, r2, #8
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e007      	b.n	80016b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0208 	bic.w	r2, r2, #8
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7f5b      	ldrb	r3, [r3, #29]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0204 	orr.w	r2, r2, #4
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0204 	bic.w	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	ea42 0103 	orr.w	r1, r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001736:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001738:	7cfb      	ldrb	r3, [r7, #19]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d003      	beq.n	8001746 <HAL_CAN_ConfigFilter+0x26>
 800173e:	7cfb      	ldrb	r3, [r7, #19]
 8001740:	2b02      	cmp	r3, #2
 8001742:	f040 80be 	bne.w	80018c2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001746:	4b65      	ldr	r3, [pc, #404]	@ (80018dc <HAL_CAN_ConfigFilter+0x1bc>)
 8001748:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001760:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	431a      	orrs	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	2201      	movs	r2, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d123      	bne.n	80017f0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3248      	adds	r2, #72	@ 0x48
 80017d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017e6:	6979      	ldr	r1, [r7, #20]
 80017e8:	3348      	adds	r3, #72	@ 0x48
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d122      	bne.n	800183e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	431a      	orrs	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3248      	adds	r2, #72	@ 0x48
 800181e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	3348      	adds	r3, #72	@ 0x48
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	401a      	ands	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001858:	e007      	b.n	800186a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001884:	e007      	b.n	8001896 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	431a      	orrs	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018b4:	f023 0201 	bic.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e006      	b.n	80018d0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
  }
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40006400 	.word	0x40006400

080018e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d12e      	bne.n	8001952 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff fddc 	bl	80014c8 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001912:	e012      	b.n	800193a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001914:	f7ff fdd8 	bl	80014c8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90b      	bls.n	800193a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e012      	b.n	8001960 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e5      	bne.n	8001914 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e006      	b.n	8001960 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d003      	beq.n	8001994 <HAL_CAN_AddTxMessage+0x2c>
 800198c:	7ffb      	ldrb	r3, [r7, #31]
 800198e:	2b02      	cmp	r3, #2
 8001990:	f040 80ad 	bne.w	8001aee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8095 	beq.w	8001ade <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	0e1b      	lsrs	r3, r3, #24
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	6809      	ldr	r1, [r1, #0]
 80019de:	431a      	orrs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3318      	adds	r3, #24
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	440b      	add	r3, r1
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e00f      	b.n	8001a0c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019f6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3318      	adds	r3, #24
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	440b      	add	r3, r1
 8001a0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3318      	adds	r3, #24
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	7d1b      	ldrb	r3, [r3, #20]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d111      	bne.n	8001a4c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3318      	adds	r3, #24
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4413      	add	r3, r2
 8001a34:	3304      	adds	r3, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	6811      	ldr	r1, [r2, #0]
 8001a3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3318      	adds	r3, #24
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	440b      	add	r3, r1
 8001a48:	3304      	adds	r3, #4
 8001a4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3307      	adds	r3, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	061a      	lsls	r2, r3, #24
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3306      	adds	r3, #6
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3305      	adds	r3, #5
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	4313      	orrs	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	3204      	adds	r2, #4
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	4610      	mov	r0, r2
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	6811      	ldr	r1, [r2, #0]
 8001a74:	ea43 0200 	orr.w	r2, r3, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001a82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3303      	adds	r3, #3
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	061a      	lsls	r2, r3, #24
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3302      	adds	r3, #2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	6811      	ldr	r1, [r2, #0]
 8001aaa:	ea43 0200 	orr.w	r2, r3, r0
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001ab8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6811      	ldr	r1, [r2, #0]
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3318      	adds	r3, #24
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	440b      	add	r3, r1
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e00e      	b.n	8001afc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e006      	b.n	8001afc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3724      	adds	r7, #36	@ 0x24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d003      	beq.n	8001b2c <HAL_CAN_GetRxMessage+0x24>
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	f040 8103 	bne.w	8001d32 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10e      	bne.n	8001b50 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d116      	bne.n	8001b6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0f7      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d107      	bne.n	8001b6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0e8      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	331b      	adds	r3, #27
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0204 	and.w	r2, r3, #4
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	331b      	adds	r3, #27
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0d5b      	lsrs	r3, r3, #21
 8001b9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e00b      	b.n	8001bbe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	331b      	adds	r3, #27
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	4413      	add	r3, r2
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	331b      	adds	r3, #27
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0202 	and.w	r2, r3, #2
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	331b      	adds	r3, #27
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	3304      	adds	r3, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	e00b      	b.n	8001c0c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	331b      	adds	r3, #27
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	3304      	adds	r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 020f 	and.w	r2, r3, #15
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	331b      	adds	r3, #27
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	4413      	add	r3, r2
 8001c18:	3304      	adds	r3, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	331b      	adds	r3, #27
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0a1a      	lsrs	r2, r3, #8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0c1a      	lsrs	r2, r3, #16
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	3302      	adds	r3, #2
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e1a      	lsrs	r2, r3, #24
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3303      	adds	r3, #3
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0a1a      	lsrs	r2, r3, #8
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3305      	adds	r3, #5
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0c1a      	lsrs	r2, r3, #16
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e1a      	lsrs	r2, r3, #24
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3307      	adds	r3, #7
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d108      	bne.n	8001d1e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	e007      	b.n	8001d2e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e006      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
  }
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d002      	beq.n	8001d6a <HAL_CAN_ActivateNotification+0x1e>
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d109      	bne.n	8001d7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6959      	ldr	r1, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e006      	b.n	8001d8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d07c      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f983 	bl	8002106 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e00:	e016      	b.n	8001e30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e14:	e00c      	b.n	8001e30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e28:	e002      	b.n	8001e30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f989 	bl	8002142 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d024      	beq.n	8001e84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f963 	bl	800211a <HAL_CAN_TxMailbox1CompleteCallback>
 8001e54:	e016      	b.n	8001e84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e68:	e00c      	b.n	8001e84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e7c:	e002      	b.n	8001e84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f969 	bl	8002156 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d024      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f943 	bl	800212e <HAL_CAN_TxMailbox2CompleteCallback>
 8001ea8:	e016      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebc:	e00c      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed0:	e002      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f949 	bl	800216a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2210      	movs	r2, #16
 8001efa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2208      	movs	r2, #8
 8001f16:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f930 	bl	800217e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fb2a 	bl	8000590 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f912 	bl	80021a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8f9 	bl	8002192 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8fc 	bl	80021ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8f5 	bl	80021ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d07b      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d072      	beq.n	80020de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002052:	2b00      	cmp	r3, #0
 8002054:	d043      	beq.n	80020de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03e      	beq.n	80020de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002066:	2b60      	cmp	r3, #96	@ 0x60
 8002068:	d02b      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x32a>
 800206a:	2b60      	cmp	r3, #96	@ 0x60
 800206c:	d82e      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 800206e:	2b50      	cmp	r3, #80	@ 0x50
 8002070:	d022      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x320>
 8002072:	2b50      	cmp	r3, #80	@ 0x50
 8002074:	d82a      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 8002076:	2b40      	cmp	r3, #64	@ 0x40
 8002078:	d019      	beq.n	80020ae <HAL_CAN_IRQHandler+0x316>
 800207a:	2b40      	cmp	r3, #64	@ 0x40
 800207c:	d826      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 800207e:	2b30      	cmp	r3, #48	@ 0x30
 8002080:	d010      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x30c>
 8002082:	2b30      	cmp	r3, #48	@ 0x30
 8002084:	d822      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 8002086:	2b10      	cmp	r3, #16
 8002088:	d002      	beq.n	8002090 <HAL_CAN_IRQHandler+0x2f8>
 800208a:	2b20      	cmp	r3, #32
 800208c:	d005      	beq.n	800209a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800208e:	e01d      	b.n	80020cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002098:	e019      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	f043 0310 	orr.w	r3, r3, #16
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020a2:	e014      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020ac:	e00f      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020b6:	e00a      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020c0:	e005      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020ca:	e000      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            break;
 80020cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80020dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f872 	bl	80021e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	@ 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	@ (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	@ (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	@ (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	@ 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff f84e 	bl	80014c8 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d008      	beq.n	800244c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2280      	movs	r2, #128	@ 0x80
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e052      	b.n	80024f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0216 	bic.w	r2, r2, #22
 800245a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800246a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <HAL_DMA_Abort+0x62>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0208 	bic.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249c:	e013      	b.n	80024c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249e:	f7ff f813 	bl	80014c8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d90c      	bls.n	80024c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2203      	movs	r2, #3
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e015      	b.n	80024f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e4      	bne.n	800249e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	223f      	movs	r2, #63	@ 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d004      	beq.n	8002518 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2280      	movs	r2, #128	@ 0x80
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e00c      	b.n	8002532 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	@ 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e16b      	b.n	8002834 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 815a 	bne.w	800282e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	2b02      	cmp	r3, #2
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d017      	beq.n	8002630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80b4 	beq.w	800282e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b60      	ldr	r3, [pc, #384]	@ (800284c <HAL_GPIO_Init+0x30c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	4a5f      	ldr	r2, [pc, #380]	@ (800284c <HAL_GPIO_Init+0x30c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d6:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <HAL_GPIO_Init+0x30c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002850 <HAL_GPIO_Init+0x310>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a52      	ldr	r2, [pc, #328]	@ (8002854 <HAL_GPIO_Init+0x314>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02b      	beq.n	8002766 <HAL_GPIO_Init+0x226>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a51      	ldr	r2, [pc, #324]	@ (8002858 <HAL_GPIO_Init+0x318>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d025      	beq.n	8002762 <HAL_GPIO_Init+0x222>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a50      	ldr	r2, [pc, #320]	@ (800285c <HAL_GPIO_Init+0x31c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <HAL_GPIO_Init+0x21e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4f      	ldr	r2, [pc, #316]	@ (8002860 <HAL_GPIO_Init+0x320>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x21a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4e      	ldr	r2, [pc, #312]	@ (8002864 <HAL_GPIO_Init+0x324>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x216>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4d      	ldr	r2, [pc, #308]	@ (8002868 <HAL_GPIO_Init+0x328>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x212>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4c      	ldr	r2, [pc, #304]	@ (800286c <HAL_GPIO_Init+0x32c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x20e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4b      	ldr	r2, [pc, #300]	@ (8002870 <HAL_GPIO_Init+0x330>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x20a>
 8002746:	2307      	movs	r3, #7
 8002748:	e00e      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800274a:	2308      	movs	r3, #8
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800274e:	2306      	movs	r3, #6
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x228>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x228>
 8002766:	2300      	movs	r3, #0
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002778:	4935      	ldr	r1, [pc, #212]	@ (8002850 <HAL_GPIO_Init+0x310>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002786:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_GPIO_Init+0x334>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027aa:	4a32      	ldr	r2, [pc, #200]	@ (8002874 <HAL_GPIO_Init+0x334>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b0:	4b30      	ldr	r3, [pc, #192]	@ (8002874 <HAL_GPIO_Init+0x334>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d4:	4a27      	ldr	r2, [pc, #156]	@ (8002874 <HAL_GPIO_Init+0x334>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027da:	4b26      	ldr	r3, [pc, #152]	@ (8002874 <HAL_GPIO_Init+0x334>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_GPIO_Init+0x334>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_GPIO_Init+0x334>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002828:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <HAL_GPIO_Init+0x334>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	f67f ae90 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3724      	adds	r7, #36	@ 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40013800 	.word	0x40013800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020800 	.word	0x40020800
 8002860:	40020c00 	.word	0x40020c00
 8002864:	40021000 	.word	0x40021000
 8002868:	40021400 	.word	0x40021400
 800286c:	40021800 	.word	0x40021800
 8002870:	40021c00 	.word	0x40021c00
 8002874:	40013c00 	.word	0x40013c00

08002878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e001      	b.n	800289a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028b2:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028be:	4a05      	ldr	r2, [pc, #20]	@ (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe4a 	bl	8000560 <HAL_GPIO_EXTI_Callback>
  }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e267      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d075      	beq.n	80029e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f6:	4b88      	ldr	r3, [pc, #544]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d00c      	beq.n	800291c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002902:	4b85      	ldr	r3, [pc, #532]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290a:	2b08      	cmp	r3, #8
 800290c:	d112      	bne.n	8002934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4b82      	ldr	r3, [pc, #520]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800291a:	d10b      	bne.n	8002934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05b      	beq.n	80029e0 <HAL_RCC_OscConfig+0x108>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d157      	bne.n	80029e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e242      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x74>
 800293e:	4b76      	ldr	r3, [pc, #472]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a75      	ldr	r2, [pc, #468]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x98>
 8002956:	4b70      	ldr	r3, [pc, #448]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b6d      	ldr	r3, [pc, #436]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6c      	ldr	r2, [pc, #432]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 8002970:	4b69      	ldr	r3, [pc, #420]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a68      	ldr	r2, [pc, #416]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b66      	ldr	r3, [pc, #408]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a65      	ldr	r2, [pc, #404]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fd9a 	bl	80014c8 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fd96 	bl	80014c8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	@ 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e207      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xc0>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe fd86 	bl	80014c8 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fd82 	bl	80014c8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	@ 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e1f3      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	4b51      	ldr	r3, [pc, #324]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0xe8>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d063      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d11c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a06:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d116      	bne.n	8002a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_RCC_OscConfig+0x152>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e1c7      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4937      	ldr	r1, [pc, #220]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	e03a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x244>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fd3b 	bl	80014c8 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe fd37 	bl	80014c8 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e1a8      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4925      	ldr	r1, [pc, #148]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <HAL_RCC_OscConfig+0x244>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fd1a 	bl	80014c8 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a98:	f7fe fd16 	bl	80014c8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e187      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d036      	beq.n	8002b30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_RCC_OscConfig+0x248>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fcfa 	bl	80014c8 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fcf6 	bl	80014c8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e167      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x200>
 8002af6:	e01b      	b.n	8002b30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af8:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_OscConfig+0x248>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7fe fce3 	bl	80014c8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	e00e      	b.n	8002b24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b06:	f7fe fcdf 	bl	80014c8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d907      	bls.n	8002b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e150      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470000 	.word	0x42470000
 8002b20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	4b88      	ldr	r3, [pc, #544]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ea      	bne.n	8002b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8097 	beq.w	8002c6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b81      	ldr	r3, [pc, #516]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	4b7d      	ldr	r3, [pc, #500]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	4a7c      	ldr	r2, [pc, #496]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b77      	ldr	r3, [pc, #476]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b74      	ldr	r3, [pc, #464]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a73      	ldr	r2, [pc, #460]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fe fc9f 	bl	80014c8 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe fc9b 	bl	80014c8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e10c      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x2ea>
 8002bb4:	4b64      	ldr	r3, [pc, #400]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	4a63      	ldr	r2, [pc, #396]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc0:	e01c      	b.n	8002bfc <HAL_RCC_OscConfig+0x324>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x30c>
 8002bca:	4b5f      	ldr	r3, [pc, #380]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	4a5e      	ldr	r2, [pc, #376]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	f043 0304 	orr.w	r3, r3, #4
 8002bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a5b      	ldr	r2, [pc, #364]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0x324>
 8002be4:	4b58      	ldr	r3, [pc, #352]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a57      	ldr	r2, [pc, #348]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf0:	4b55      	ldr	r3, [pc, #340]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a54      	ldr	r2, [pc, #336]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 0304 	bic.w	r3, r3, #4
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fc60 	bl	80014c8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fc5c 	bl	80014c8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0cb      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	4b49      	ldr	r3, [pc, #292]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ee      	beq.n	8002c0c <HAL_RCC_OscConfig+0x334>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fc4a 	bl	80014c8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe fc46 	bl	80014c8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0b5      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ee      	bne.n	8002c38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	4a38      	ldr	r2, [pc, #224]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a1 	beq.w	8002db8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c76:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d05c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d141      	bne.n	8002d0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fc1a 	bl	80014c8 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fc16 	bl	80014c8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e087      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b27      	ldr	r3, [pc, #156]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	491b      	ldr	r1, [pc, #108]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fbef 	bl	80014c8 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fbeb 	bl	80014c8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e05c      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x416>
 8002d0c:	e054      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fbd8 	bl	80014c8 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fbd4 	bl	80014c8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e045      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x444>
 8002d3a:	e03d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e038      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <HAL_RCC_OscConfig+0x4ec>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d028      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d121      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d11a      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d84:	4013      	ands	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0cc      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b68      	ldr	r3, [pc, #416]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d90c      	bls.n	8002e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b65      	ldr	r3, [pc, #404]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0b8      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e1c:	4b59      	ldr	r3, [pc, #356]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a58      	ldr	r2, [pc, #352]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e34:	4b53      	ldr	r3, [pc, #332]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b50      	ldr	r3, [pc, #320]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	494d      	ldr	r1, [pc, #308]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d044      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d119      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e07f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b3f      	ldr	r3, [pc, #252]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e067      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4934      	ldr	r1, [pc, #208]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fb06 	bl	80014c8 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe fb02 	bl	80014c8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e04f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d20c      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e032      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4916      	ldr	r1, [pc, #88]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3a:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	490e      	ldr	r1, [pc, #56]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f4e:	f000 f821 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	490a      	ldr	r1, [pc, #40]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	5ccb      	ldrb	r3, [r1, r3]
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fa66 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023c00 	.word	0x40023c00
 8002f84:	40023800 	.word	0x40023800
 8002f88:	08004ca4 	.word	0x08004ca4
 8002f8c:	20000020 	.word	0x20000020
 8002f90:	20000024 	.word	0x20000024

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f98:	b094      	sub	sp, #80	@ 0x50
 8002f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fac:	4b79      	ldr	r3, [pc, #484]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	f200 80e1 	bhi.w	8003180 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc6:	e0db      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4b73      	ldr	r3, [pc, #460]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002fcc:	e0db      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fce:	4b73      	ldr	r3, [pc, #460]	@ (800319c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fd2:	e0d8      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fde:	4b6d      	ldr	r3, [pc, #436]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d063      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fea:	4b6a      	ldr	r3, [pc, #424]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
 8003002:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003006:	4622      	mov	r2, r4
 8003008:	462b      	mov	r3, r5
 800300a:	f04f 0000 	mov.w	r0, #0
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	0159      	lsls	r1, r3, #5
 8003014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003018:	0150      	lsls	r0, r2, #5
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4621      	mov	r1, r4
 8003020:	1a51      	subs	r1, r2, r1
 8003022:	6139      	str	r1, [r7, #16]
 8003024:	4629      	mov	r1, r5
 8003026:	eb63 0301 	sbc.w	r3, r3, r1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003038:	4659      	mov	r1, fp
 800303a:	018b      	lsls	r3, r1, #6
 800303c:	4651      	mov	r1, sl
 800303e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003042:	4651      	mov	r1, sl
 8003044:	018a      	lsls	r2, r1, #6
 8003046:	4651      	mov	r1, sl
 8003048:	ebb2 0801 	subs.w	r8, r2, r1
 800304c:	4659      	mov	r1, fp
 800304e:	eb63 0901 	sbc.w	r9, r3, r1
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003066:	4690      	mov	r8, r2
 8003068:	4699      	mov	r9, r3
 800306a:	4623      	mov	r3, r4
 800306c:	eb18 0303 	adds.w	r3, r8, r3
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	462b      	mov	r3, r5
 8003074:	eb49 0303 	adc.w	r3, r9, r3
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003086:	4629      	mov	r1, r5
 8003088:	024b      	lsls	r3, r1, #9
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003090:	4621      	mov	r1, r4
 8003092:	024a      	lsls	r2, r1, #9
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800309a:	2200      	movs	r2, #0
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030a4:	f7fd f8e4 	bl	8000270 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b0:	e058      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b2:	4b38      	ldr	r3, [pc, #224]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	2200      	movs	r2, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	4611      	mov	r1, r2
 80030be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	0159      	lsls	r1, r3, #5
 80030da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030de:	0150      	lsls	r0, r2, #5
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4641      	mov	r1, r8
 80030e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ea:	4649      	mov	r1, r9
 80030ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003100:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003104:	ebb2 040a 	subs.w	r4, r2, sl
 8003108:	eb63 050b 	sbc.w	r5, r3, fp
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	00eb      	lsls	r3, r5, #3
 8003116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311a:	00e2      	lsls	r2, r4, #3
 800311c:	4614      	mov	r4, r2
 800311e:	461d      	mov	r5, r3
 8003120:	4643      	mov	r3, r8
 8003122:	18e3      	adds	r3, r4, r3
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	464b      	mov	r3, r9
 8003128:	eb45 0303 	adc.w	r3, r5, r3
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313a:	4629      	mov	r1, r5
 800313c:	028b      	lsls	r3, r1, #10
 800313e:	4621      	mov	r1, r4
 8003140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003144:	4621      	mov	r1, r4
 8003146:	028a      	lsls	r2, r1, #10
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800314e:	2200      	movs	r2, #0
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	61fa      	str	r2, [r7, #28]
 8003154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003158:	f7fd f88a 	bl	8000270 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x200>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x204>)
 8003182:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003188:	4618      	mov	r0, r3
 800318a:	3750      	adds	r7, #80	@ 0x50
 800318c:	46bd      	mov	sp, r7
 800318e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	00f42400 	.word	0x00f42400
 800319c:	007a1200 	.word	0x007a1200

080031a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000020 	.word	0x20000020

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0a9b      	lsrs	r3, r3, #10
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	08004cb4 	.word	0x08004cb4

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031e4:	f7ff ffdc 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0b5b      	lsrs	r3, r3, #13
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	08004cb4 	.word	0x08004cb4

08003208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e042      	b.n	80032a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd ffaa 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800324a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fdbd 	bl	8003dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d175      	bne.n	80033b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_UART_Transmit+0x2c>
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e06e      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2221      	movs	r2, #33	@ 0x21
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e6:	f7fe f8ef 	bl	80014c8 <HAL_GetTick>
 80032ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003300:	d108      	bne.n	8003314 <HAL_UART_Transmit+0x6c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	e003      	b.n	800331c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800331c:	e02e      	b.n	800337c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fb1f 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e03a      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	3302      	adds	r3, #2
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e007      	b.n	800336e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	3301      	adds	r3, #1
 800336c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1cb      	bne.n	800331e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2200      	movs	r2, #0
 800338e:	2140      	movs	r1, #64	@ 0x40
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 faeb 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e006      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	4613      	mov	r3, r2
 80033ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d112      	bne.n	80033fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_UART_Receive_IT+0x26>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e00b      	b.n	8003400 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	461a      	mov	r2, r3
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fb12 	bl	8003a1e <UART_Start_Receive_IT>
 80033fa:	4603      	mov	r3, r0
 80033fc:	e000      	b.n	8003400 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b0ba      	sub	sp, #232	@ 0xe8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_UART_IRQHandler+0x66>
 800345a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fbf2 	bl	8003c50 <UART_Receive_IT>
      return;
 800346c:	e25b      	b.n	8003926 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800346e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80de 	beq.w	8003634 <HAL_UART_IRQHandler+0x22c>
 8003478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003488:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80d1 	beq.w	8003634 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_UART_IRQHandler+0xae>
 800349e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_UART_IRQHandler+0xd2>
 80034c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_UART_IRQHandler+0xf6>
 80034e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f043 0204 	orr.w	r2, r3, #4
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d011      	beq.n	800352e <HAL_UART_IRQHandler+0x126>
 800350a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f043 0208 	orr.w	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 81f2 	beq.w	800391c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_UART_IRQHandler+0x14e>
 8003544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fb7d 	bl	8003c50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <HAL_UART_IRQHandler+0x17a>
 800357a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d04f      	beq.n	8003622 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa85 	bl	8003a92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d141      	bne.n	800361a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1d9      	bne.n	8003596 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	4a7e      	ldr	r2, [pc, #504]	@ (80037e8 <HAL_UART_IRQHandler+0x3e0>)
 80035f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe ff7f 	bl	80024fa <HAL_DMA_Abort_IT>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800360c:	4610      	mov	r0, r2
 800360e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	e00e      	b.n	8003630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f994 	bl	8003940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	e00a      	b.n	8003630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f990 	bl	8003940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	e006      	b.n	8003630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f98c 	bl	8003940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800362e:	e175      	b.n	800391c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	bf00      	nop
    return;
 8003632:	e173      	b.n	800391c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003638:	2b01      	cmp	r3, #1
 800363a:	f040 814f 	bne.w	80038dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8148 	beq.w	80038dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8141 	beq.w	80038dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	f040 80b6 	bne.w	80037ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800368c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8145 	beq.w	8003920 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800369a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800369e:	429a      	cmp	r2, r3
 80036a0:	f080 813e 	bcs.w	8003920 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b6:	f000 8088 	beq.w	80037ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1d9      	bne.n	80036ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3314      	adds	r3, #20
 8003726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800372a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800372e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003732:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800373c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e1      	bne.n	8003706 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003766:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003768:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800376c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e3      	bne.n	8003742 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800379a:	f023 0310 	bic.w	r3, r3, #16
 800379e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e3      	bne.n	8003788 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fe28 	bl	800241a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8b7 	bl	8003954 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037e6:	e09b      	b.n	8003920 <HAL_UART_IRQHandler+0x518>
 80037e8:	08003b59 	.word	0x08003b59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 808e 	beq.w	8003924 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8089 	beq.w	8003924 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003828:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003836:	647a      	str	r2, [r7, #68]	@ 0x44
 8003838:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800383c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e3      	bne.n	8003812 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	623b      	str	r3, [r7, #32]
   return(result);
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3314      	adds	r3, #20
 800386a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800386e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e3      	bne.n	800384a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038b4:	61fa      	str	r2, [r7, #28]
 80038b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	617b      	str	r3, [r7, #20]
   return(result);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e3      	bne.n	8003890 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038d2:	4619      	mov	r1, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f83d 	bl	8003954 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038da:	e023      	b.n	8003924 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_UART_IRQHandler+0x4f4>
 80038e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f943 	bl	8003b80 <UART_Transmit_IT>
    return;
 80038fa:	e014      	b.n	8003926 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00e      	beq.n	8003926 <HAL_UART_IRQHandler+0x51e>
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f983 	bl	8003c20 <UART_EndTransmit_IT>
    return;
 800391a:	e004      	b.n	8003926 <HAL_UART_IRQHandler+0x51e>
    return;
 800391c:	bf00      	nop
 800391e:	e002      	b.n	8003926 <HAL_UART_IRQHandler+0x51e>
      return;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_UART_IRQHandler+0x51e>
      return;
 8003924:	bf00      	nop
  }
}
 8003926:	37e8      	adds	r7, #232	@ 0xe8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397c:	e03b      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d037      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7fd fd9f 	bl	80014c8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <UART_WaitOnFlagUntilTimeout+0x30>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e03a      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d023      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b80      	cmp	r3, #128	@ 0x80
 80039b2:	d020      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d01d      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d116      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f857 	bl	8003a92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2208      	movs	r2, #8
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d0b4      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2222      	movs	r2, #34	@ 0x22
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0220 	orr.w	r2, r2, #32
 8003a82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b095      	sub	sp, #84	@ 0x54
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aba:	643a      	str	r2, [r7, #64]	@ 0x40
 8003abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3314      	adds	r3, #20
 8003aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d119      	bne.n	8003b3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 0310 	bic.w	r3, r3, #16
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b2a:	61ba      	str	r2, [r7, #24]
 8003b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6979      	ldr	r1, [r7, #20]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	613b      	str	r3, [r7, #16]
   return(result);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b4c:	bf00      	nop
 8003b4e:	3754      	adds	r7, #84	@ 0x54
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff fee4 	bl	8003940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b21      	cmp	r3, #33	@ 0x21
 8003b92:	d13e      	bne.n	8003c12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9c:	d114      	bne.n	8003bc8 <UART_Transmit_IT+0x48>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d110      	bne.n	8003bc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	1c9a      	adds	r2, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]
 8003bc6:	e008      	b.n	8003bda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	1c59      	adds	r1, r3, #1
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6211      	str	r1, [r2, #32]
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4619      	mov	r1, r3
 8003be8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10f      	bne.n	8003c0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fe73 	bl	800392c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	@ 0x30
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b22      	cmp	r3, #34	@ 0x22
 8003c62:	f040 80ae 	bne.w	8003dc2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6e:	d117      	bne.n	8003ca0 <UART_Receive_IT+0x50>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d113      	bne.n	8003ca0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c9e:	e026      	b.n	8003cee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb2:	d007      	beq.n	8003cc4 <UART_Receive_IT+0x74>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <UART_Receive_IT+0x82>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e008      	b.n	8003ce4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d15d      	bne.n	8003dbe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0220 	bic.w	r2, r2, #32
 8003d10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d135      	bne.n	8003db4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f023 0310 	bic.w	r3, r3, #16
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6e:	623a      	str	r2, [r7, #32]
 8003d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	69f9      	ldr	r1, [r7, #28]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e5      	bne.n	8003d4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d10a      	bne.n	8003da6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fdd1 	bl	8003954 <HAL_UARTEx_RxEventCallback>
 8003db2:	e002      	b.n	8003dba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fc ff93 	bl	8000ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e002      	b.n	8003dc4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3730      	adds	r7, #48	@ 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b0c0      	sub	sp, #256	@ 0x100
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	68d9      	ldr	r1, [r3, #12]
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	ea40 0301 	orr.w	r3, r0, r1
 8003df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e24:	f021 010c 	bic.w	r1, r1, #12
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e32:	430b      	orrs	r3, r1
 8003e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	6999      	ldr	r1, [r3, #24]
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	ea40 0301 	orr.w	r3, r0, r1
 8003e52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b8f      	ldr	r3, [pc, #572]	@ (8004098 <UART_SetConfig+0x2cc>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d005      	beq.n	8003e6c <UART_SetConfig+0xa0>
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b8d      	ldr	r3, [pc, #564]	@ (800409c <UART_SetConfig+0x2d0>)
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d104      	bne.n	8003e76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7ff f9b8 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8003e70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e74:	e003      	b.n	8003e7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e76:	f7ff f99f 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e88:	f040 810c 	bne.w	80040a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	1891      	adds	r1, r2, r2
 8003ea4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ea6:	415b      	adcs	r3, r3
 8003ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eae:	4621      	mov	r1, r4
 8003eb0:	eb12 0801 	adds.w	r8, r2, r1
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	eb43 0901 	adc.w	r9, r3, r1
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ece:	4690      	mov	r8, r2
 8003ed0:	4699      	mov	r9, r3
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	eb18 0303 	adds.w	r3, r8, r3
 8003ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003edc:	462b      	mov	r3, r5
 8003ede:	eb49 0303 	adc.w	r3, r9, r3
 8003ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003efa:	460b      	mov	r3, r1
 8003efc:	18db      	adds	r3, r3, r3
 8003efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f00:	4613      	mov	r3, r2
 8003f02:	eb42 0303 	adc.w	r3, r2, r3
 8003f06:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f10:	f7fc f9ae 	bl	8000270 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4b61      	ldr	r3, [pc, #388]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	011c      	lsls	r4, r3, #4
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f44:	4641      	mov	r1, r8
 8003f46:	eb12 0a01 	adds.w	sl, r2, r1
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f64:	4692      	mov	sl, r2
 8003f66:	469b      	mov	fp, r3
 8003f68:	4643      	mov	r3, r8
 8003f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f72:	464b      	mov	r3, r9
 8003f74:	eb4b 0303 	adc.w	r3, fp, r3
 8003f78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f90:	460b      	mov	r3, r1
 8003f92:	18db      	adds	r3, r3, r3
 8003f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f96:	4613      	mov	r3, r2
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fa6:	f7fc f963 	bl	8000270 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8003fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2264      	movs	r2, #100	@ 0x64
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	1acb      	subs	r3, r1, r3
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fc6:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8003fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fd4:	441c      	add	r4, r3
 8003fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	637b      	str	r3, [r7, #52]	@ 0x34
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800402c:	464b      	mov	r3, r9
 800402e:	460a      	mov	r2, r1
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004044:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800404c:	460b      	mov	r3, r1
 800404e:	18db      	adds	r3, r3, r3
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004052:	4613      	mov	r3, r2
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800405a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800405e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004062:	f7fc f905 	bl	8000270 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4b0d      	ldr	r3, [pc, #52]	@ (80040a0 <UART_SetConfig+0x2d4>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	2164      	movs	r1, #100	@ 0x64
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	3332      	adds	r3, #50	@ 0x32
 800407e:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <UART_SetConfig+0x2d4>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 0207 	and.w	r2, r3, #7
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4422      	add	r2, r4
 8004092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004094:	e106      	b.n	80042a4 <UART_SetConfig+0x4d8>
 8004096:	bf00      	nop
 8004098:	40011000 	.word	0x40011000
 800409c:	40011400 	.word	0x40011400
 80040a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040b6:	4642      	mov	r2, r8
 80040b8:	464b      	mov	r3, r9
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	6239      	str	r1, [r7, #32]
 80040be:	415b      	adcs	r3, r3
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040c6:	4641      	mov	r1, r8
 80040c8:	1854      	adds	r4, r2, r1
 80040ca:	4649      	mov	r1, r9
 80040cc:	eb43 0501 	adc.w	r5, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	00eb      	lsls	r3, r5, #3
 80040da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040de:	00e2      	lsls	r2, r4, #3
 80040e0:	4614      	mov	r4, r2
 80040e2:	461d      	mov	r5, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	18e3      	adds	r3, r4, r3
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040ec:	464b      	mov	r3, r9
 80040ee:	eb45 0303 	adc.w	r3, r5, r3
 80040f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004102:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004112:	4629      	mov	r1, r5
 8004114:	008b      	lsls	r3, r1, #2
 8004116:	4621      	mov	r1, r4
 8004118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411c:	4621      	mov	r1, r4
 800411e:	008a      	lsls	r2, r1, #2
 8004120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004124:	f7fc f8a4 	bl	8000270 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4b60      	ldr	r3, [pc, #384]	@ (80042b0 <UART_SetConfig+0x4e4>)
 800412e:	fba3 2302 	umull	r2, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	011c      	lsls	r4, r3, #4
 8004136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004140:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	61b9      	str	r1, [r7, #24]
 8004150:	415b      	adcs	r3, r3
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	6139      	str	r1, [r7, #16]
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800418c:	464b      	mov	r3, r9
 800418e:	460a      	mov	r2, r1
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041b0:	4649      	mov	r1, r9
 80041b2:	008b      	lsls	r3, r1, #2
 80041b4:	4641      	mov	r1, r8
 80041b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ba:	4641      	mov	r1, r8
 80041bc:	008a      	lsls	r2, r1, #2
 80041be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041c2:	f7fc f855 	bl	8000270 <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	4b38      	ldr	r3, [pc, #224]	@ (80042b0 <UART_SetConfig+0x4e4>)
 80041ce:	fba3 2301 	umull	r2, r3, r3, r1
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2264      	movs	r2, #100	@ 0x64
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	1acb      	subs	r3, r1, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	@ 0x32
 80041e0:	4a33      	ldr	r2, [pc, #204]	@ (80042b0 <UART_SetConfig+0x4e4>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ec:	441c      	add	r4, r3
 80041ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f2:	2200      	movs	r2, #0
 80041f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80041f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041fc:	4642      	mov	r2, r8
 80041fe:	464b      	mov	r3, r9
 8004200:	1891      	adds	r1, r2, r2
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	415b      	adcs	r3, r3
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420c:	4641      	mov	r1, r8
 800420e:	1851      	adds	r1, r2, r1
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	4649      	mov	r1, r9
 8004214:	414b      	adcs	r3, r1
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004224:	4659      	mov	r1, fp
 8004226:	00cb      	lsls	r3, r1, #3
 8004228:	4651      	mov	r1, sl
 800422a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422e:	4651      	mov	r1, sl
 8004230:	00ca      	lsls	r2, r1, #3
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	4603      	mov	r3, r0
 8004238:	4642      	mov	r2, r8
 800423a:	189b      	adds	r3, r3, r2
 800423c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800423e:	464b      	mov	r3, r9
 8004240:	460a      	mov	r2, r1
 8004242:	eb42 0303 	adc.w	r3, r2, r3
 8004246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	663b      	str	r3, [r7, #96]	@ 0x60
 8004252:	667a      	str	r2, [r7, #100]	@ 0x64
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004260:	4649      	mov	r1, r9
 8004262:	008b      	lsls	r3, r1, #2
 8004264:	4641      	mov	r1, r8
 8004266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800426a:	4641      	mov	r1, r8
 800426c:	008a      	lsls	r2, r1, #2
 800426e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004272:	f7fb fffd 	bl	8000270 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <UART_SetConfig+0x4e4>)
 800427c:	fba3 1302 	umull	r1, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	2164      	movs	r1, #100	@ 0x64
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	3332      	adds	r3, #50	@ 0x32
 800428e:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <UART_SetConfig+0x4e4>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4422      	add	r2, r4
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042aa:	46bd      	mov	sp, r7
 80042ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b0:	51eb851f 	.word	0x51eb851f

080042b4 <siprintf>:
 80042b4:	b40e      	push	{r1, r2, r3}
 80042b6:	b500      	push	{lr}
 80042b8:	b09c      	sub	sp, #112	@ 0x70
 80042ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80042bc:	9002      	str	r0, [sp, #8]
 80042be:	9006      	str	r0, [sp, #24]
 80042c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042c4:	4809      	ldr	r0, [pc, #36]	@ (80042ec <siprintf+0x38>)
 80042c6:	9107      	str	r1, [sp, #28]
 80042c8:	9104      	str	r1, [sp, #16]
 80042ca:	4909      	ldr	r1, [pc, #36]	@ (80042f0 <siprintf+0x3c>)
 80042cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d0:	9105      	str	r1, [sp, #20]
 80042d2:	6800      	ldr	r0, [r0, #0]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	a902      	add	r1, sp, #8
 80042d8:	f000 f994 	bl	8004604 <_svfiprintf_r>
 80042dc:	9b02      	ldr	r3, [sp, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	b01c      	add	sp, #112	@ 0x70
 80042e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e8:	b003      	add	sp, #12
 80042ea:	4770      	bx	lr
 80042ec:	2000002c 	.word	0x2000002c
 80042f0:	ffff0208 	.word	0xffff0208

080042f4 <memset>:
 80042f4:	4402      	add	r2, r0
 80042f6:	4603      	mov	r3, r0
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <__errno>:
 8004304:	4b01      	ldr	r3, [pc, #4]	@ (800430c <__errno+0x8>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	2000002c 	.word	0x2000002c

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4d0d      	ldr	r5, [pc, #52]	@ (8004348 <__libc_init_array+0x38>)
 8004314:	4c0d      	ldr	r4, [pc, #52]	@ (800434c <__libc_init_array+0x3c>)
 8004316:	1b64      	subs	r4, r4, r5
 8004318:	10a4      	asrs	r4, r4, #2
 800431a:	2600      	movs	r6, #0
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	4d0b      	ldr	r5, [pc, #44]	@ (8004350 <__libc_init_array+0x40>)
 8004322:	4c0c      	ldr	r4, [pc, #48]	@ (8004354 <__libc_init_array+0x44>)
 8004324:	f000 fc66 	bl	8004bf4 <_init>
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	2600      	movs	r6, #0
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f855 3b04 	ldr.w	r3, [r5], #4
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	08004cf8 	.word	0x08004cf8
 800434c:	08004cf8 	.word	0x08004cf8
 8004350:	08004cf8 	.word	0x08004cf8
 8004354:	08004cfc 	.word	0x08004cfc

08004358 <__retarget_lock_acquire_recursive>:
 8004358:	4770      	bx	lr

0800435a <__retarget_lock_release_recursive>:
 800435a:	4770      	bx	lr

0800435c <_free_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4605      	mov	r5, r0
 8004360:	2900      	cmp	r1, #0
 8004362:	d041      	beq.n	80043e8 <_free_r+0x8c>
 8004364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004368:	1f0c      	subs	r4, r1, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfb8      	it	lt
 800436e:	18e4      	addlt	r4, r4, r3
 8004370:	f000 f8e0 	bl	8004534 <__malloc_lock>
 8004374:	4a1d      	ldr	r2, [pc, #116]	@ (80043ec <_free_r+0x90>)
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	b933      	cbnz	r3, 8004388 <_free_r+0x2c>
 800437a:	6063      	str	r3, [r4, #4]
 800437c:	6014      	str	r4, [r2, #0]
 800437e:	4628      	mov	r0, r5
 8004380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004384:	f000 b8dc 	b.w	8004540 <__malloc_unlock>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d908      	bls.n	800439e <_free_r+0x42>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	1821      	adds	r1, r4, r0
 8004390:	428b      	cmp	r3, r1
 8004392:	bf01      	itttt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	1809      	addeq	r1, r1, r0
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	e7ed      	b.n	800437a <_free_r+0x1e>
 800439e:	461a      	mov	r2, r3
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b10b      	cbz	r3, 80043a8 <_free_r+0x4c>
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d9fa      	bls.n	800439e <_free_r+0x42>
 80043a8:	6811      	ldr	r1, [r2, #0]
 80043aa:	1850      	adds	r0, r2, r1
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d10b      	bne.n	80043c8 <_free_r+0x6c>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	4401      	add	r1, r0
 80043b4:	1850      	adds	r0, r2, r1
 80043b6:	4283      	cmp	r3, r0
 80043b8:	6011      	str	r1, [r2, #0]
 80043ba:	d1e0      	bne.n	800437e <_free_r+0x22>
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	6053      	str	r3, [r2, #4]
 80043c2:	4408      	add	r0, r1
 80043c4:	6010      	str	r0, [r2, #0]
 80043c6:	e7da      	b.n	800437e <_free_r+0x22>
 80043c8:	d902      	bls.n	80043d0 <_free_r+0x74>
 80043ca:	230c      	movs	r3, #12
 80043cc:	602b      	str	r3, [r5, #0]
 80043ce:	e7d6      	b.n	800437e <_free_r+0x22>
 80043d0:	6820      	ldr	r0, [r4, #0]
 80043d2:	1821      	adds	r1, r4, r0
 80043d4:	428b      	cmp	r3, r1
 80043d6:	bf04      	itt	eq
 80043d8:	6819      	ldreq	r1, [r3, #0]
 80043da:	685b      	ldreq	r3, [r3, #4]
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	bf04      	itt	eq
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	6054      	str	r4, [r2, #4]
 80043e6:	e7ca      	b.n	800437e <_free_r+0x22>
 80043e8:	bd38      	pop	{r3, r4, r5, pc}
 80043ea:	bf00      	nop
 80043ec:	20001370 	.word	0x20001370

080043f0 <sbrk_aligned>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004430 <sbrk_aligned+0x40>)
 80043f4:	460c      	mov	r4, r1
 80043f6:	6831      	ldr	r1, [r6, #0]
 80043f8:	4605      	mov	r5, r0
 80043fa:	b911      	cbnz	r1, 8004402 <sbrk_aligned+0x12>
 80043fc:	f000 fba6 	bl	8004b4c <_sbrk_r>
 8004400:	6030      	str	r0, [r6, #0]
 8004402:	4621      	mov	r1, r4
 8004404:	4628      	mov	r0, r5
 8004406:	f000 fba1 	bl	8004b4c <_sbrk_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d103      	bne.n	8004416 <sbrk_aligned+0x26>
 800440e:	f04f 34ff 	mov.w	r4, #4294967295
 8004412:	4620      	mov	r0, r4
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	1cc4      	adds	r4, r0, #3
 8004418:	f024 0403 	bic.w	r4, r4, #3
 800441c:	42a0      	cmp	r0, r4
 800441e:	d0f8      	beq.n	8004412 <sbrk_aligned+0x22>
 8004420:	1a21      	subs	r1, r4, r0
 8004422:	4628      	mov	r0, r5
 8004424:	f000 fb92 	bl	8004b4c <_sbrk_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d1f2      	bne.n	8004412 <sbrk_aligned+0x22>
 800442c:	e7ef      	b.n	800440e <sbrk_aligned+0x1e>
 800442e:	bf00      	nop
 8004430:	2000136c 	.word	0x2000136c

08004434 <_malloc_r>:
 8004434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004438:	1ccd      	adds	r5, r1, #3
 800443a:	f025 0503 	bic.w	r5, r5, #3
 800443e:	3508      	adds	r5, #8
 8004440:	2d0c      	cmp	r5, #12
 8004442:	bf38      	it	cc
 8004444:	250c      	movcc	r5, #12
 8004446:	2d00      	cmp	r5, #0
 8004448:	4606      	mov	r6, r0
 800444a:	db01      	blt.n	8004450 <_malloc_r+0x1c>
 800444c:	42a9      	cmp	r1, r5
 800444e:	d904      	bls.n	800445a <_malloc_r+0x26>
 8004450:	230c      	movs	r3, #12
 8004452:	6033      	str	r3, [r6, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004530 <_malloc_r+0xfc>
 800445e:	f000 f869 	bl	8004534 <__malloc_lock>
 8004462:	f8d8 3000 	ldr.w	r3, [r8]
 8004466:	461c      	mov	r4, r3
 8004468:	bb44      	cbnz	r4, 80044bc <_malloc_r+0x88>
 800446a:	4629      	mov	r1, r5
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff ffbf 	bl	80043f0 <sbrk_aligned>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	4604      	mov	r4, r0
 8004476:	d158      	bne.n	800452a <_malloc_r+0xf6>
 8004478:	f8d8 4000 	ldr.w	r4, [r8]
 800447c:	4627      	mov	r7, r4
 800447e:	2f00      	cmp	r7, #0
 8004480:	d143      	bne.n	800450a <_malloc_r+0xd6>
 8004482:	2c00      	cmp	r4, #0
 8004484:	d04b      	beq.n	800451e <_malloc_r+0xea>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	4639      	mov	r1, r7
 800448a:	4630      	mov	r0, r6
 800448c:	eb04 0903 	add.w	r9, r4, r3
 8004490:	f000 fb5c 	bl	8004b4c <_sbrk_r>
 8004494:	4581      	cmp	r9, r0
 8004496:	d142      	bne.n	800451e <_malloc_r+0xea>
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	1a6d      	subs	r5, r5, r1
 800449c:	4629      	mov	r1, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	f7ff ffa6 	bl	80043f0 <sbrk_aligned>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d03a      	beq.n	800451e <_malloc_r+0xea>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	442b      	add	r3, r5
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	f8d8 3000 	ldr.w	r3, [r8]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	bb62      	cbnz	r2, 8004510 <_malloc_r+0xdc>
 80044b6:	f8c8 7000 	str.w	r7, [r8]
 80044ba:	e00f      	b.n	80044dc <_malloc_r+0xa8>
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	1b52      	subs	r2, r2, r5
 80044c0:	d420      	bmi.n	8004504 <_malloc_r+0xd0>
 80044c2:	2a0b      	cmp	r2, #11
 80044c4:	d917      	bls.n	80044f6 <_malloc_r+0xc2>
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	6025      	str	r5, [r4, #0]
 80044cc:	bf18      	it	ne
 80044ce:	6059      	strne	r1, [r3, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	bf08      	it	eq
 80044d4:	f8c8 1000 	streq.w	r1, [r8]
 80044d8:	5162      	str	r2, [r4, r5]
 80044da:	604b      	str	r3, [r1, #4]
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f82f 	bl	8004540 <__malloc_unlock>
 80044e2:	f104 000b 	add.w	r0, r4, #11
 80044e6:	1d23      	adds	r3, r4, #4
 80044e8:	f020 0007 	bic.w	r0, r0, #7
 80044ec:	1ac2      	subs	r2, r0, r3
 80044ee:	bf1c      	itt	ne
 80044f0:	1a1b      	subne	r3, r3, r0
 80044f2:	50a3      	strne	r3, [r4, r2]
 80044f4:	e7af      	b.n	8004456 <_malloc_r+0x22>
 80044f6:	6862      	ldr	r2, [r4, #4]
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	bf0c      	ite	eq
 80044fc:	f8c8 2000 	streq.w	r2, [r8]
 8004500:	605a      	strne	r2, [r3, #4]
 8004502:	e7eb      	b.n	80044dc <_malloc_r+0xa8>
 8004504:	4623      	mov	r3, r4
 8004506:	6864      	ldr	r4, [r4, #4]
 8004508:	e7ae      	b.n	8004468 <_malloc_r+0x34>
 800450a:	463c      	mov	r4, r7
 800450c:	687f      	ldr	r7, [r7, #4]
 800450e:	e7b6      	b.n	800447e <_malloc_r+0x4a>
 8004510:	461a      	mov	r2, r3
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	42a3      	cmp	r3, r4
 8004516:	d1fb      	bne.n	8004510 <_malloc_r+0xdc>
 8004518:	2300      	movs	r3, #0
 800451a:	6053      	str	r3, [r2, #4]
 800451c:	e7de      	b.n	80044dc <_malloc_r+0xa8>
 800451e:	230c      	movs	r3, #12
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	4630      	mov	r0, r6
 8004524:	f000 f80c 	bl	8004540 <__malloc_unlock>
 8004528:	e794      	b.n	8004454 <_malloc_r+0x20>
 800452a:	6005      	str	r5, [r0, #0]
 800452c:	e7d6      	b.n	80044dc <_malloc_r+0xa8>
 800452e:	bf00      	nop
 8004530:	20001370 	.word	0x20001370

08004534 <__malloc_lock>:
 8004534:	4801      	ldr	r0, [pc, #4]	@ (800453c <__malloc_lock+0x8>)
 8004536:	f7ff bf0f 	b.w	8004358 <__retarget_lock_acquire_recursive>
 800453a:	bf00      	nop
 800453c:	20001368 	.word	0x20001368

08004540 <__malloc_unlock>:
 8004540:	4801      	ldr	r0, [pc, #4]	@ (8004548 <__malloc_unlock+0x8>)
 8004542:	f7ff bf0a 	b.w	800435a <__retarget_lock_release_recursive>
 8004546:	bf00      	nop
 8004548:	20001368 	.word	0x20001368

0800454c <__ssputs_r>:
 800454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	688e      	ldr	r6, [r1, #8]
 8004552:	461f      	mov	r7, r3
 8004554:	42be      	cmp	r6, r7
 8004556:	680b      	ldr	r3, [r1, #0]
 8004558:	4682      	mov	sl, r0
 800455a:	460c      	mov	r4, r1
 800455c:	4690      	mov	r8, r2
 800455e:	d82d      	bhi.n	80045bc <__ssputs_r+0x70>
 8004560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004568:	d026      	beq.n	80045b8 <__ssputs_r+0x6c>
 800456a:	6965      	ldr	r5, [r4, #20]
 800456c:	6909      	ldr	r1, [r1, #16]
 800456e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004572:	eba3 0901 	sub.w	r9, r3, r1
 8004576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800457a:	1c7b      	adds	r3, r7, #1
 800457c:	444b      	add	r3, r9
 800457e:	106d      	asrs	r5, r5, #1
 8004580:	429d      	cmp	r5, r3
 8004582:	bf38      	it	cc
 8004584:	461d      	movcc	r5, r3
 8004586:	0553      	lsls	r3, r2, #21
 8004588:	d527      	bpl.n	80045da <__ssputs_r+0x8e>
 800458a:	4629      	mov	r1, r5
 800458c:	f7ff ff52 	bl	8004434 <_malloc_r>
 8004590:	4606      	mov	r6, r0
 8004592:	b360      	cbz	r0, 80045ee <__ssputs_r+0xa2>
 8004594:	6921      	ldr	r1, [r4, #16]
 8004596:	464a      	mov	r2, r9
 8004598:	f000 fae8 	bl	8004b6c <memcpy>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	6126      	str	r6, [r4, #16]
 80045aa:	6165      	str	r5, [r4, #20]
 80045ac:	444e      	add	r6, r9
 80045ae:	eba5 0509 	sub.w	r5, r5, r9
 80045b2:	6026      	str	r6, [r4, #0]
 80045b4:	60a5      	str	r5, [r4, #8]
 80045b6:	463e      	mov	r6, r7
 80045b8:	42be      	cmp	r6, r7
 80045ba:	d900      	bls.n	80045be <__ssputs_r+0x72>
 80045bc:	463e      	mov	r6, r7
 80045be:	6820      	ldr	r0, [r4, #0]
 80045c0:	4632      	mov	r2, r6
 80045c2:	4641      	mov	r1, r8
 80045c4:	f000 faa8 	bl	8004b18 <memmove>
 80045c8:	68a3      	ldr	r3, [r4, #8]
 80045ca:	1b9b      	subs	r3, r3, r6
 80045cc:	60a3      	str	r3, [r4, #8]
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	4433      	add	r3, r6
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	2000      	movs	r0, #0
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045da:	462a      	mov	r2, r5
 80045dc:	f000 fad4 	bl	8004b88 <_realloc_r>
 80045e0:	4606      	mov	r6, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1e0      	bne.n	80045a8 <__ssputs_r+0x5c>
 80045e6:	6921      	ldr	r1, [r4, #16]
 80045e8:	4650      	mov	r0, sl
 80045ea:	f7ff feb7 	bl	800435c <_free_r>
 80045ee:	230c      	movs	r3, #12
 80045f0:	f8ca 3000 	str.w	r3, [sl]
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045fa:	81a3      	strh	r3, [r4, #12]
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	e7e9      	b.n	80045d6 <__ssputs_r+0x8a>
	...

08004604 <_svfiprintf_r>:
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	4698      	mov	r8, r3
 800460a:	898b      	ldrh	r3, [r1, #12]
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	b09d      	sub	sp, #116	@ 0x74
 8004610:	4607      	mov	r7, r0
 8004612:	460d      	mov	r5, r1
 8004614:	4614      	mov	r4, r2
 8004616:	d510      	bpl.n	800463a <_svfiprintf_r+0x36>
 8004618:	690b      	ldr	r3, [r1, #16]
 800461a:	b973      	cbnz	r3, 800463a <_svfiprintf_r+0x36>
 800461c:	2140      	movs	r1, #64	@ 0x40
 800461e:	f7ff ff09 	bl	8004434 <_malloc_r>
 8004622:	6028      	str	r0, [r5, #0]
 8004624:	6128      	str	r0, [r5, #16]
 8004626:	b930      	cbnz	r0, 8004636 <_svfiprintf_r+0x32>
 8004628:	230c      	movs	r3, #12
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	b01d      	add	sp, #116	@ 0x74
 8004632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004636:	2340      	movs	r3, #64	@ 0x40
 8004638:	616b      	str	r3, [r5, #20]
 800463a:	2300      	movs	r3, #0
 800463c:	9309      	str	r3, [sp, #36]	@ 0x24
 800463e:	2320      	movs	r3, #32
 8004640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004644:	f8cd 800c 	str.w	r8, [sp, #12]
 8004648:	2330      	movs	r3, #48	@ 0x30
 800464a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80047e8 <_svfiprintf_r+0x1e4>
 800464e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004652:	f04f 0901 	mov.w	r9, #1
 8004656:	4623      	mov	r3, r4
 8004658:	469a      	mov	sl, r3
 800465a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800465e:	b10a      	cbz	r2, 8004664 <_svfiprintf_r+0x60>
 8004660:	2a25      	cmp	r2, #37	@ 0x25
 8004662:	d1f9      	bne.n	8004658 <_svfiprintf_r+0x54>
 8004664:	ebba 0b04 	subs.w	fp, sl, r4
 8004668:	d00b      	beq.n	8004682 <_svfiprintf_r+0x7e>
 800466a:	465b      	mov	r3, fp
 800466c:	4622      	mov	r2, r4
 800466e:	4629      	mov	r1, r5
 8004670:	4638      	mov	r0, r7
 8004672:	f7ff ff6b 	bl	800454c <__ssputs_r>
 8004676:	3001      	adds	r0, #1
 8004678:	f000 80a7 	beq.w	80047ca <_svfiprintf_r+0x1c6>
 800467c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800467e:	445a      	add	r2, fp
 8004680:	9209      	str	r2, [sp, #36]	@ 0x24
 8004682:	f89a 3000 	ldrb.w	r3, [sl]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 809f 	beq.w	80047ca <_svfiprintf_r+0x1c6>
 800468c:	2300      	movs	r3, #0
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004696:	f10a 0a01 	add.w	sl, sl, #1
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	9307      	str	r3, [sp, #28]
 800469e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80046a4:	4654      	mov	r4, sl
 80046a6:	2205      	movs	r2, #5
 80046a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ac:	484e      	ldr	r0, [pc, #312]	@ (80047e8 <_svfiprintf_r+0x1e4>)
 80046ae:	f7fb fd8f 	bl	80001d0 <memchr>
 80046b2:	9a04      	ldr	r2, [sp, #16]
 80046b4:	b9d8      	cbnz	r0, 80046ee <_svfiprintf_r+0xea>
 80046b6:	06d0      	lsls	r0, r2, #27
 80046b8:	bf44      	itt	mi
 80046ba:	2320      	movmi	r3, #32
 80046bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046c0:	0711      	lsls	r1, r2, #28
 80046c2:	bf44      	itt	mi
 80046c4:	232b      	movmi	r3, #43	@ 0x2b
 80046c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ca:	f89a 3000 	ldrb.w	r3, [sl]
 80046ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80046d0:	d015      	beq.n	80046fe <_svfiprintf_r+0xfa>
 80046d2:	9a07      	ldr	r2, [sp, #28]
 80046d4:	4654      	mov	r4, sl
 80046d6:	2000      	movs	r0, #0
 80046d8:	f04f 0c0a 	mov.w	ip, #10
 80046dc:	4621      	mov	r1, r4
 80046de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e2:	3b30      	subs	r3, #48	@ 0x30
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	d94b      	bls.n	8004780 <_svfiprintf_r+0x17c>
 80046e8:	b1b0      	cbz	r0, 8004718 <_svfiprintf_r+0x114>
 80046ea:	9207      	str	r2, [sp, #28]
 80046ec:	e014      	b.n	8004718 <_svfiprintf_r+0x114>
 80046ee:	eba0 0308 	sub.w	r3, r0, r8
 80046f2:	fa09 f303 	lsl.w	r3, r9, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	46a2      	mov	sl, r4
 80046fc:	e7d2      	b.n	80046a4 <_svfiprintf_r+0xa0>
 80046fe:	9b03      	ldr	r3, [sp, #12]
 8004700:	1d19      	adds	r1, r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	9103      	str	r1, [sp, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfbb      	ittet	lt
 800470a:	425b      	neglt	r3, r3
 800470c:	f042 0202 	orrlt.w	r2, r2, #2
 8004710:	9307      	strge	r3, [sp, #28]
 8004712:	9307      	strlt	r3, [sp, #28]
 8004714:	bfb8      	it	lt
 8004716:	9204      	strlt	r2, [sp, #16]
 8004718:	7823      	ldrb	r3, [r4, #0]
 800471a:	2b2e      	cmp	r3, #46	@ 0x2e
 800471c:	d10a      	bne.n	8004734 <_svfiprintf_r+0x130>
 800471e:	7863      	ldrb	r3, [r4, #1]
 8004720:	2b2a      	cmp	r3, #42	@ 0x2a
 8004722:	d132      	bne.n	800478a <_svfiprintf_r+0x186>
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	1d1a      	adds	r2, r3, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	9203      	str	r2, [sp, #12]
 800472c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004730:	3402      	adds	r4, #2
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80047f8 <_svfiprintf_r+0x1f4>
 8004738:	7821      	ldrb	r1, [r4, #0]
 800473a:	2203      	movs	r2, #3
 800473c:	4650      	mov	r0, sl
 800473e:	f7fb fd47 	bl	80001d0 <memchr>
 8004742:	b138      	cbz	r0, 8004754 <_svfiprintf_r+0x150>
 8004744:	9b04      	ldr	r3, [sp, #16]
 8004746:	eba0 000a 	sub.w	r0, r0, sl
 800474a:	2240      	movs	r2, #64	@ 0x40
 800474c:	4082      	lsls	r2, r0
 800474e:	4313      	orrs	r3, r2
 8004750:	3401      	adds	r4, #1
 8004752:	9304      	str	r3, [sp, #16]
 8004754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004758:	4824      	ldr	r0, [pc, #144]	@ (80047ec <_svfiprintf_r+0x1e8>)
 800475a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800475e:	2206      	movs	r2, #6
 8004760:	f7fb fd36 	bl	80001d0 <memchr>
 8004764:	2800      	cmp	r0, #0
 8004766:	d036      	beq.n	80047d6 <_svfiprintf_r+0x1d2>
 8004768:	4b21      	ldr	r3, [pc, #132]	@ (80047f0 <_svfiprintf_r+0x1ec>)
 800476a:	bb1b      	cbnz	r3, 80047b4 <_svfiprintf_r+0x1b0>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	3307      	adds	r3, #7
 8004770:	f023 0307 	bic.w	r3, r3, #7
 8004774:	3308      	adds	r3, #8
 8004776:	9303      	str	r3, [sp, #12]
 8004778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800477a:	4433      	add	r3, r6
 800477c:	9309      	str	r3, [sp, #36]	@ 0x24
 800477e:	e76a      	b.n	8004656 <_svfiprintf_r+0x52>
 8004780:	fb0c 3202 	mla	r2, ip, r2, r3
 8004784:	460c      	mov	r4, r1
 8004786:	2001      	movs	r0, #1
 8004788:	e7a8      	b.n	80046dc <_svfiprintf_r+0xd8>
 800478a:	2300      	movs	r3, #0
 800478c:	3401      	adds	r4, #1
 800478e:	9305      	str	r3, [sp, #20]
 8004790:	4619      	mov	r1, r3
 8004792:	f04f 0c0a 	mov.w	ip, #10
 8004796:	4620      	mov	r0, r4
 8004798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800479c:	3a30      	subs	r2, #48	@ 0x30
 800479e:	2a09      	cmp	r2, #9
 80047a0:	d903      	bls.n	80047aa <_svfiprintf_r+0x1a6>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0c6      	beq.n	8004734 <_svfiprintf_r+0x130>
 80047a6:	9105      	str	r1, [sp, #20]
 80047a8:	e7c4      	b.n	8004734 <_svfiprintf_r+0x130>
 80047aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ae:	4604      	mov	r4, r0
 80047b0:	2301      	movs	r3, #1
 80047b2:	e7f0      	b.n	8004796 <_svfiprintf_r+0x192>
 80047b4:	ab03      	add	r3, sp, #12
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	462a      	mov	r2, r5
 80047ba:	4b0e      	ldr	r3, [pc, #56]	@ (80047f4 <_svfiprintf_r+0x1f0>)
 80047bc:	a904      	add	r1, sp, #16
 80047be:	4638      	mov	r0, r7
 80047c0:	f3af 8000 	nop.w
 80047c4:	1c42      	adds	r2, r0, #1
 80047c6:	4606      	mov	r6, r0
 80047c8:	d1d6      	bne.n	8004778 <_svfiprintf_r+0x174>
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	065b      	lsls	r3, r3, #25
 80047ce:	f53f af2d 	bmi.w	800462c <_svfiprintf_r+0x28>
 80047d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047d4:	e72c      	b.n	8004630 <_svfiprintf_r+0x2c>
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	462a      	mov	r2, r5
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <_svfiprintf_r+0x1f0>)
 80047de:	a904      	add	r1, sp, #16
 80047e0:	4638      	mov	r0, r7
 80047e2:	f000 f879 	bl	80048d8 <_printf_i>
 80047e6:	e7ed      	b.n	80047c4 <_svfiprintf_r+0x1c0>
 80047e8:	08004cbc 	.word	0x08004cbc
 80047ec:	08004cc6 	.word	0x08004cc6
 80047f0:	00000000 	.word	0x00000000
 80047f4:	0800454d 	.word	0x0800454d
 80047f8:	08004cc2 	.word	0x08004cc2

080047fc <_printf_common>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	4616      	mov	r6, r2
 8004802:	4698      	mov	r8, r3
 8004804:	688a      	ldr	r2, [r1, #8]
 8004806:	690b      	ldr	r3, [r1, #16]
 8004808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800480c:	4293      	cmp	r3, r2
 800480e:	bfb8      	it	lt
 8004810:	4613      	movlt	r3, r2
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004818:	4607      	mov	r7, r0
 800481a:	460c      	mov	r4, r1
 800481c:	b10a      	cbz	r2, 8004822 <_printf_common+0x26>
 800481e:	3301      	adds	r3, #1
 8004820:	6033      	str	r3, [r6, #0]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	0699      	lsls	r1, r3, #26
 8004826:	bf42      	ittt	mi
 8004828:	6833      	ldrmi	r3, [r6, #0]
 800482a:	3302      	addmi	r3, #2
 800482c:	6033      	strmi	r3, [r6, #0]
 800482e:	6825      	ldr	r5, [r4, #0]
 8004830:	f015 0506 	ands.w	r5, r5, #6
 8004834:	d106      	bne.n	8004844 <_printf_common+0x48>
 8004836:	f104 0a19 	add.w	sl, r4, #25
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	6832      	ldr	r2, [r6, #0]
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	42ab      	cmp	r3, r5
 8004842:	dc26      	bgt.n	8004892 <_printf_common+0x96>
 8004844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004848:	6822      	ldr	r2, [r4, #0]
 800484a:	3b00      	subs	r3, #0
 800484c:	bf18      	it	ne
 800484e:	2301      	movne	r3, #1
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d42b      	bmi.n	80048ac <_printf_common+0xb0>
 8004854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004858:	4641      	mov	r1, r8
 800485a:	4638      	mov	r0, r7
 800485c:	47c8      	blx	r9
 800485e:	3001      	adds	r0, #1
 8004860:	d01e      	beq.n	80048a0 <_printf_common+0xa4>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	f003 0306 	and.w	r3, r3, #6
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf02      	ittt	eq
 800486e:	68e5      	ldreq	r5, [r4, #12]
 8004870:	6833      	ldreq	r3, [r6, #0]
 8004872:	1aed      	subeq	r5, r5, r3
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	bf0c      	ite	eq
 8004878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800487c:	2500      	movne	r5, #0
 800487e:	4293      	cmp	r3, r2
 8004880:	bfc4      	itt	gt
 8004882:	1a9b      	subgt	r3, r3, r2
 8004884:	18ed      	addgt	r5, r5, r3
 8004886:	2600      	movs	r6, #0
 8004888:	341a      	adds	r4, #26
 800488a:	42b5      	cmp	r5, r6
 800488c:	d11a      	bne.n	80048c4 <_printf_common+0xc8>
 800488e:	2000      	movs	r0, #0
 8004890:	e008      	b.n	80048a4 <_printf_common+0xa8>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4641      	mov	r1, r8
 8004898:	4638      	mov	r0, r7
 800489a:	47c8      	blx	r9
 800489c:	3001      	adds	r0, #1
 800489e:	d103      	bne.n	80048a8 <_printf_common+0xac>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7c6      	b.n	800483a <_printf_common+0x3e>
 80048ac:	18e1      	adds	r1, r4, r3
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	2030      	movs	r0, #48	@ 0x30
 80048b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048b6:	4422      	add	r2, r4
 80048b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048c0:	3302      	adds	r3, #2
 80048c2:	e7c7      	b.n	8004854 <_printf_common+0x58>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4622      	mov	r2, r4
 80048c8:	4641      	mov	r1, r8
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c8      	blx	r9
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa4>
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7d9      	b.n	800488a <_printf_common+0x8e>
	...

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	7e0f      	ldrb	r7, [r1, #24]
 80048de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048e0:	2f78      	cmp	r7, #120	@ 0x78
 80048e2:	4691      	mov	r9, r2
 80048e4:	4680      	mov	r8, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	469a      	mov	sl, r3
 80048ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	@ 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d2 	beq.w	8004a9e <_printf_i+0x1c6>
 80048fa:	2f58      	cmp	r7, #88	@ 0x58
 80048fc:	f000 80b9 	beq.w	8004a72 <_printf_i+0x19a>
 8004900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a101      	add	r1, pc, #4	@ (adr r1, 8004918 <_printf_i+0x40>)
 8004914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a85 	.word	0x08004a85
 8004948:	080049af 	.word	0x080049af
 800494c:	08004a3f 	.word	0x08004a3f
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004aa7 	.word	0x08004aa7
 800495c:	08004901 	.word	0x08004901
 8004960:	080049af 	.word	0x080049af
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a47 	.word	0x08004a47
 8004970:	6833      	ldr	r3, [r6, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6032      	str	r2, [r6, #0]
 8004978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e09d      	b.n	8004ac0 <_printf_i+0x1e8>
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	6031      	str	r1, [r6, #0]
 800498c:	0606      	lsls	r6, r0, #24
 800498e:	d501      	bpl.n	8004994 <_printf_i+0xbc>
 8004990:	681d      	ldr	r5, [r3, #0]
 8004992:	e003      	b.n	800499c <_printf_i+0xc4>
 8004994:	0645      	lsls	r5, r0, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0xb8>
 8004998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800499c:	2d00      	cmp	r5, #0
 800499e:	da03      	bge.n	80049a8 <_printf_i+0xd0>
 80049a0:	232d      	movs	r3, #45	@ 0x2d
 80049a2:	426d      	negs	r5, r5
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049a8:	4859      	ldr	r0, [pc, #356]	@ (8004b10 <_printf_i+0x238>)
 80049aa:	230a      	movs	r3, #10
 80049ac:	e011      	b.n	80049d2 <_printf_i+0xfa>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	0608      	lsls	r0, r1, #24
 80049b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80049b8:	d402      	bmi.n	80049c0 <_printf_i+0xe8>
 80049ba:	0649      	lsls	r1, r1, #25
 80049bc:	bf48      	it	mi
 80049be:	b2ad      	uxthmi	r5, r5
 80049c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80049c2:	4853      	ldr	r0, [pc, #332]	@ (8004b10 <_printf_i+0x238>)
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	bf14      	ite	ne
 80049c8:	230a      	movne	r3, #10
 80049ca:	2308      	moveq	r3, #8
 80049cc:	2100      	movs	r1, #0
 80049ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049d2:	6866      	ldr	r6, [r4, #4]
 80049d4:	60a6      	str	r6, [r4, #8]
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	bfa2      	ittt	ge
 80049da:	6821      	ldrge	r1, [r4, #0]
 80049dc:	f021 0104 	bicge.w	r1, r1, #4
 80049e0:	6021      	strge	r1, [r4, #0]
 80049e2:	b90d      	cbnz	r5, 80049e8 <_printf_i+0x110>
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	d04b      	beq.n	8004a80 <_printf_i+0x1a8>
 80049e8:	4616      	mov	r6, r2
 80049ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80049ee:	fb03 5711 	mls	r7, r3, r1, r5
 80049f2:	5dc7      	ldrb	r7, [r0, r7]
 80049f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f8:	462f      	mov	r7, r5
 80049fa:	42bb      	cmp	r3, r7
 80049fc:	460d      	mov	r5, r1
 80049fe:	d9f4      	bls.n	80049ea <_printf_i+0x112>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d10b      	bne.n	8004a1c <_printf_i+0x144>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	07df      	lsls	r7, r3, #31
 8004a08:	d508      	bpl.n	8004a1c <_printf_i+0x144>
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	6861      	ldr	r1, [r4, #4]
 8004a0e:	4299      	cmp	r1, r3
 8004a10:	bfde      	ittt	le
 8004a12:	2330      	movle	r3, #48	@ 0x30
 8004a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a1c:	1b92      	subs	r2, r2, r6
 8004a1e:	6122      	str	r2, [r4, #16]
 8004a20:	f8cd a000 	str.w	sl, [sp]
 8004a24:	464b      	mov	r3, r9
 8004a26:	aa03      	add	r2, sp, #12
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7ff fee6 	bl	80047fc <_printf_common>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d14a      	bne.n	8004aca <_printf_i+0x1f2>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	b004      	add	sp, #16
 8004a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	f043 0320 	orr.w	r3, r3, #32
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	4833      	ldr	r0, [pc, #204]	@ (8004b14 <_printf_i+0x23c>)
 8004a48:	2778      	movs	r7, #120	@ 0x78
 8004a4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	6831      	ldr	r1, [r6, #0]
 8004a52:	061f      	lsls	r7, r3, #24
 8004a54:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a58:	d402      	bmi.n	8004a60 <_printf_i+0x188>
 8004a5a:	065f      	lsls	r7, r3, #25
 8004a5c:	bf48      	it	mi
 8004a5e:	b2ad      	uxthmi	r5, r5
 8004a60:	6031      	str	r1, [r6, #0]
 8004a62:	07d9      	lsls	r1, r3, #31
 8004a64:	bf44      	itt	mi
 8004a66:	f043 0320 	orrmi.w	r3, r3, #32
 8004a6a:	6023      	strmi	r3, [r4, #0]
 8004a6c:	b11d      	cbz	r5, 8004a76 <_printf_i+0x19e>
 8004a6e:	2310      	movs	r3, #16
 8004a70:	e7ac      	b.n	80049cc <_printf_i+0xf4>
 8004a72:	4827      	ldr	r0, [pc, #156]	@ (8004b10 <_printf_i+0x238>)
 8004a74:	e7e9      	b.n	8004a4a <_printf_i+0x172>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f023 0320 	bic.w	r3, r3, #32
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	e7f6      	b.n	8004a6e <_printf_i+0x196>
 8004a80:	4616      	mov	r6, r2
 8004a82:	e7bd      	b.n	8004a00 <_printf_i+0x128>
 8004a84:	6833      	ldr	r3, [r6, #0]
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	6961      	ldr	r1, [r4, #20]
 8004a8a:	1d18      	adds	r0, r3, #4
 8004a8c:	6030      	str	r0, [r6, #0]
 8004a8e:	062e      	lsls	r6, r5, #24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	d501      	bpl.n	8004a98 <_printf_i+0x1c0>
 8004a94:	6019      	str	r1, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <_printf_i+0x1c6>
 8004a98:	0668      	lsls	r0, r5, #25
 8004a9a:	d5fb      	bpl.n	8004a94 <_printf_i+0x1bc>
 8004a9c:	8019      	strh	r1, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	e7bc      	b.n	8004a20 <_printf_i+0x148>
 8004aa6:	6833      	ldr	r3, [r6, #0]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	6032      	str	r2, [r6, #0]
 8004aac:	681e      	ldr	r6, [r3, #0]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7fb fb8c 	bl	80001d0 <memchr>
 8004ab8:	b108      	cbz	r0, 8004abe <_printf_i+0x1e6>
 8004aba:	1b80      	subs	r0, r0, r6
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ac8:	e7aa      	b.n	8004a20 <_printf_i+0x148>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	4632      	mov	r2, r6
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0ad      	beq.n	8004a34 <_printf_i+0x15c>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	d413      	bmi.n	8004b06 <_printf_i+0x22e>
 8004ade:	68e0      	ldr	r0, [r4, #12]
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	4298      	cmp	r0, r3
 8004ae4:	bfb8      	it	lt
 8004ae6:	4618      	movlt	r0, r3
 8004ae8:	e7a6      	b.n	8004a38 <_printf_i+0x160>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d09d      	beq.n	8004a34 <_printf_i+0x15c>
 8004af8:	3501      	adds	r5, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	9903      	ldr	r1, [sp, #12]
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dcf2      	bgt.n	8004aea <_printf_i+0x212>
 8004b04:	e7eb      	b.n	8004ade <_printf_i+0x206>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f104 0619 	add.w	r6, r4, #25
 8004b0c:	e7f5      	b.n	8004afa <_printf_i+0x222>
 8004b0e:	bf00      	nop
 8004b10:	08004ccd 	.word	0x08004ccd
 8004b14:	08004cde 	.word	0x08004cde

08004b18 <memmove>:
 8004b18:	4288      	cmp	r0, r1
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	eb01 0402 	add.w	r4, r1, r2
 8004b20:	d902      	bls.n	8004b28 <memmove+0x10>
 8004b22:	4284      	cmp	r4, r0
 8004b24:	4623      	mov	r3, r4
 8004b26:	d807      	bhi.n	8004b38 <memmove+0x20>
 8004b28:	1e43      	subs	r3, r0, #1
 8004b2a:	42a1      	cmp	r1, r4
 8004b2c:	d008      	beq.n	8004b40 <memmove+0x28>
 8004b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b36:	e7f8      	b.n	8004b2a <memmove+0x12>
 8004b38:	4402      	add	r2, r0
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d100      	bne.n	8004b42 <memmove+0x2a>
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b4a:	e7f7      	b.n	8004b3c <memmove+0x24>

08004b4c <_sbrk_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4d06      	ldr	r5, [pc, #24]	@ (8004b68 <_sbrk_r+0x1c>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	f7fc fbde 	bl	8001318 <_sbrk>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_sbrk_r+0x1a>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_sbrk_r+0x1a>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	20001364 	.word	0x20001364

08004b6c <memcpy>:
 8004b6c:	440a      	add	r2, r1
 8004b6e:	4291      	cmp	r1, r2
 8004b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b74:	d100      	bne.n	8004b78 <memcpy+0xc>
 8004b76:	4770      	bx	lr
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b82:	4291      	cmp	r1, r2
 8004b84:	d1f9      	bne.n	8004b7a <memcpy+0xe>
 8004b86:	bd10      	pop	{r4, pc}

08004b88 <_realloc_r>:
 8004b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8c:	4680      	mov	r8, r0
 8004b8e:	4615      	mov	r5, r2
 8004b90:	460c      	mov	r4, r1
 8004b92:	b921      	cbnz	r1, 8004b9e <_realloc_r+0x16>
 8004b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b98:	4611      	mov	r1, r2
 8004b9a:	f7ff bc4b 	b.w	8004434 <_malloc_r>
 8004b9e:	b92a      	cbnz	r2, 8004bac <_realloc_r+0x24>
 8004ba0:	f7ff fbdc 	bl	800435c <_free_r>
 8004ba4:	2400      	movs	r4, #0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bac:	f000 f81a 	bl	8004be4 <_malloc_usable_size_r>
 8004bb0:	4285      	cmp	r5, r0
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	d802      	bhi.n	8004bbc <_realloc_r+0x34>
 8004bb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004bba:	d8f4      	bhi.n	8004ba6 <_realloc_r+0x1e>
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7ff fc38 	bl	8004434 <_malloc_r>
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d0ec      	beq.n	8004ba4 <_realloc_r+0x1c>
 8004bca:	42b5      	cmp	r5, r6
 8004bcc:	462a      	mov	r2, r5
 8004bce:	4621      	mov	r1, r4
 8004bd0:	bf28      	it	cs
 8004bd2:	4632      	movcs	r2, r6
 8004bd4:	f7ff ffca 	bl	8004b6c <memcpy>
 8004bd8:	4621      	mov	r1, r4
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f7ff fbbe 	bl	800435c <_free_r>
 8004be0:	463c      	mov	r4, r7
 8004be2:	e7e0      	b.n	8004ba6 <_realloc_r+0x1e>

08004be4 <_malloc_usable_size_r>:
 8004be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004be8:	1f18      	subs	r0, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bfbc      	itt	lt
 8004bee:	580b      	ldrlt	r3, [r1, r0]
 8004bf0:	18c0      	addlt	r0, r0, r3
 8004bf2:	4770      	bx	lr

08004bf4 <_init>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr

08004c00 <_fini>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	bf00      	nop
 8004c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c06:	bc08      	pop	{r3}
 8004c08:	469e      	mov	lr, r3
 8004c0a:	4770      	bx	lr
